type token =
  | NOELSE
  | ASN
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | EXPEQ
  | EXP
  | AND
  | OR
  | ARROW
  | CONTINUE
  | BREAK
  | TAB
  | SPACE
  | COLON
  | EOF
  | EOL
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | COMMA
  | DEF
  | IN
  | RETURN
  | NONE
  | DOT
  | UNION
  | BOOL
  | INT
  | FLOAT
  | STRING
  | TUPLE
  | LIST
  | MODULUS
  | SEP
  | CLASS
  | IMPORT
  | RANGE
  | DELETE
  | TYPE
  | INDENT
  | DEDENT
  | NEW
  | DREF
  | PUBLIC
  | PRIVATE
  | ADDRESS_OF
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | VIRTUAL
  | NULL
  | MAKEMANUAL
  | RELEASE
  | LBRACE
  | RBRACE
  | RETAIN
  | VARIABLE of (
# 15 "cobraparse.mly"
        string
# 77 "cobraparse.ml"
)
  | ID of (
# 16 "cobraparse.mly"
        string
# 82 "cobraparse.ml"
)
  | Float_Lit of (
# 18 "cobraparse.mly"
        float
# 87 "cobraparse.ml"
)
  | String_Lit of (
# 19 "cobraparse.mly"
        string
# 92 "cobraparse.ml"
)
  | Literal of (
# 20 "cobraparse.mly"
        int
# 97 "cobraparse.ml"
)
  | BLIT of (
# 21 "cobraparse.mly"
        bool
# 102 "cobraparse.ml"
)

open Parsing
let _ = parse_error;;
# 1 "cobraparse.mly"
 
	open Ast
# 110 "cobraparse.ml"
let yytransl_const = [|
  257 (* NOELSE *);
  258 (* ASN *);
  259 (* EQ *);
  260 (* NEQ *);
  261 (* LT *);
  262 (* GT *);
  263 (* LEQ *);
  264 (* GEQ *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* PLUSEQ *);
  270 (* MINUSEQ *);
  271 (* TIMESEQ *);
  272 (* DIVIDEEQ *);
  273 (* EXPEQ *);
  274 (* EXP *);
  275 (* AND *);
  276 (* OR *);
  277 (* ARROW *);
  278 (* CONTINUE *);
  279 (* BREAK *);
  280 (* TAB *);
  281 (* SPACE *);
  282 (* COLON *);
    0 (* EOF *);
  283 (* EOL *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* ELIF *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* COMMA *);
  290 (* DEF *);
  291 (* IN *);
  292 (* RETURN *);
  293 (* NONE *);
  294 (* DOT *);
  295 (* UNION *);
  296 (* BOOL *);
  297 (* INT *);
  298 (* FLOAT *);
  299 (* STRING *);
  300 (* TUPLE *);
  301 (* LIST *);
  302 (* MODULUS *);
  303 (* SEP *);
  304 (* CLASS *);
  305 (* IMPORT *);
  306 (* RANGE *);
  307 (* DELETE *);
  308 (* TYPE *);
  309 (* INDENT *);
  310 (* DEDENT *);
  311 (* NEW *);
  312 (* DREF *);
  313 (* PUBLIC *);
  314 (* PRIVATE *);
  315 (* ADDRESS_OF *);
  316 (* LPAREN *);
  317 (* RPAREN *);
  318 (* LBRACK *);
  319 (* RBRACK *);
  320 (* VIRTUAL *);
  321 (* NULL *);
  322 (* MAKEMANUAL *);
  323 (* RELEASE *);
  324 (* LBRACE *);
  325 (* RBRACE *);
  326 (* RETAIN *);
    0|]

let yytransl_block = [|
  327 (* VARIABLE *);
  328 (* ID *);
  329 (* Float_Lit *);
  330 (* String_Lit *);
  331 (* Literal *);
  332 (* BLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\007\000\
\007\000\008\000\008\000\009\000\009\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\012\000\012\000\005\000\014\000\
\015\000\016\000\016\000\017\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\018\000\018\000\019\000\019\000\
\020\000\013\000\013\000\021\000\021\000\022\000\023\000\023\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\024\000\
\024\000\025\000\025\000\026\000\026\000\027\000\027\000\027\000\
\028\000\028\000\028\000\028\000\028\000\028\000\029\000\029\000\
\029\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\031\000\031\000\032\000\032\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\008\000\010\000\000\000\001\000\001\000\
\003\000\001\000\003\000\000\000\002\000\002\000\003\000\003\000\
\003\000\005\000\001\000\003\000\001\000\001\000\003\000\005\000\
\003\000\000\000\002\000\002\000\001\000\001\000\002\000\002\000\
\002\000\004\000\001\000\001\000\005\000\010\000\000\000\002\000\
\005\000\005\000\010\000\000\000\002\000\005\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\000\000\001\000\001\000\003\000\001\000\001\000\003\000\
\001\000\004\000\004\000\001\000\004\000\004\000\001\000\003\000\
\002\000\001\000\003\000\001\000\003\000\004\000\006\000\001\000\
\002\000\002\000\002\000\003\000\004\000\007\000\002\000\001\000\
\003\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\001\000\
\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\
\000\000\055\000\051\000\050\000\049\000\052\000\053\000\054\000\
\011\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\092\000\091\000\090\000\000\000\000\000\000\000\000\000\
\000\000\019\000\021\000\022\000\000\000\000\000\076\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\000\000\000\000\073\000\083\000\000\000\000\000\
\000\000\059\000\000\000\000\000\087\000\000\000\000\000\000\000\
\081\000\000\000\023\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\000\000\000\000\000\000\020\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\089\000\015\000\016\000\000\000\000\000\000\000\000\000\
\108\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\000\000\000\000\064\000\056\000\061\000\000\000\000\000\
\078\000\000\000\000\000\000\000\024\000\018\000\000\000\070\000\
\069\000\067\000\066\000\000\000\110\000\000\000\000\000\000\000\
\000\000\036\000\035\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\029\000\048\000\079\000\000\000\000\000\
\000\000\045\000\000\000\000\000\033\000\031\000\032\000\028\000\
\025\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\046\000\043\000\000\000\000\000\000\000\
\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\041\000\038\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\012\000\033\000\054\000\013\000\014\000\
\055\000\056\000\127\000\058\000\059\000\060\000\165\000\186\000\
\187\000\188\000\216\000\217\000\176\000\177\000\151\000\061\000\
\081\000\082\000\077\000\073\000\062\000\063\000\128\000\129\000"

let yysindex = "\006\000\
\231\254\000\000\223\254\000\000\039\000\231\254\254\254\000\000\
\000\000\244\254\048\255\020\255\000\000\059\255\136\001\031\255\
\244\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\001\088\255\000\000\101\255\075\255\104\255\096\002\
\000\000\075\255\187\003\187\003\187\003\045\255\062\255\155\001\
\016\255\187\003\187\003\187\003\064\255\065\255\187\003\236\254\
\000\000\000\000\000\000\000\000\016\255\067\255\085\255\096\002\
\171\002\000\000\000\000\000\000\102\255\139\255\000\000\000\000\
\196\002\220\002\244\002\079\255\117\255\143\255\084\255\089\255\
\000\000\016\255\112\255\102\255\000\000\000\000\203\001\013\003\
\090\255\000\000\129\255\131\255\000\000\136\001\103\255\187\003\
\000\000\110\255\000\000\000\000\187\003\187\003\187\003\187\003\
\187\003\187\003\187\003\187\003\187\003\187\003\187\003\187\003\
\187\003\000\000\187\003\109\255\187\003\146\255\154\255\000\000\
\113\255\000\000\136\001\011\255\055\255\121\255\116\255\000\000\
\187\003\000\000\000\000\000\000\000\000\128\255\032\003\130\255\
\000\000\118\255\220\255\220\255\111\255\111\255\111\255\111\255\
\005\255\005\255\172\255\172\255\172\255\204\003\180\003\172\255\
\000\000\160\003\075\255\151\255\179\255\168\255\000\000\145\255\
\149\255\150\255\152\255\000\000\000\000\000\000\187\003\187\003\
\000\000\153\255\184\255\252\001\000\000\000\000\136\001\000\000\
\000\000\000\000\000\000\158\255\000\000\219\255\187\003\194\255\
\184\255\000\000\000\000\187\003\063\255\162\255\163\255\063\003\
\000\000\181\255\252\001\000\000\000\000\000\000\187\003\088\003\
\210\255\000\000\112\003\187\255\000\000\000\000\000\000\000\000\
\000\000\000\000\160\003\226\255\231\255\232\255\180\255\075\255\
\075\255\151\255\000\000\000\000\000\000\230\255\187\003\238\255\
\230\255\136\003\235\255\000\000\241\255\254\255\151\255\151\255\
\000\000\000\000"

let yyrindex = "\000\000\
\009\001\000\000\000\000\000\000\000\000\009\001\000\000\000\000\
\000\000\221\255\023\255\000\000\000\000\228\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\222\255\000\000\000\000\000\000\237\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\239\255\
\000\000\000\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\000\120\000\
\000\000\000\000\091\255\159\255\000\000\000\000\000\000\227\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\243\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\191\255\012\000\244\255\000\000\
\000\000\000\000\017\255\142\001\081\001\090\001\121\001\130\001\
\022\255\050\001\182\000\213\000\244\000\027\255\086\255\019\001\
\000\000\236\255\000\000\000\000\000\000\151\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\243\255\000\000\
\000\000\000\000\046\002\242\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\242\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\196\001\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\029\001\000\000\000\000\223\255\249\255\034\001\000\000\
\252\000\000\000\224\255\000\000\000\000\114\255\137\255\123\000\
\000\000\000\000\094\000\000\000\135\000\000\000\146\000\217\255\
\000\000\194\000\216\255\000\000\000\000\000\000\157\000\167\000"

let yytablesize = 1288
let yytable = "\057\000\
\064\000\076\000\065\000\066\000\067\000\086\000\001\000\025\000\
\003\000\078\000\079\000\080\000\089\000\076\000\085\000\101\000\
\102\000\087\000\029\000\093\000\093\000\185\000\103\000\057\000\
\101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
\072\000\118\000\076\000\093\000\093\000\007\000\008\000\088\000\
\101\000\101\000\093\000\093\000\185\000\099\000\099\000\101\000\
\101\000\093\000\107\000\026\000\099\000\099\000\101\000\010\000\
\027\000\010\000\011\000\099\000\131\000\132\000\133\000\134\000\
\135\000\136\000\137\000\138\000\139\000\140\000\141\000\142\000\
\143\000\015\000\144\000\074\000\146\000\093\000\125\000\093\000\
\016\000\152\000\101\000\010\000\101\000\153\000\075\000\099\000\
\080\000\099\000\214\000\017\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\225\000\
\226\000\100\000\068\000\150\000\062\000\062\000\062\000\100\000\
\100\000\163\000\030\000\069\000\062\000\062\000\100\000\099\000\
\100\000\101\000\102\000\062\000\196\000\154\000\031\000\032\000\
\103\000\155\000\034\000\184\000\070\000\197\000\083\000\084\000\
\062\000\090\000\091\000\108\000\109\000\113\000\192\000\114\000\
\115\000\116\000\100\000\195\000\100\000\119\000\117\000\062\000\
\122\000\062\000\184\000\123\000\107\000\124\000\203\000\150\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\130\000\147\000\126\000\212\000\213\000\
\063\000\063\000\063\000\145\000\148\000\156\000\218\000\149\000\
\063\000\063\000\157\000\159\000\162\000\103\000\161\000\063\000\
\072\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\164\000\063\000\166\000\167\000\168\000\
\075\000\075\000\075\000\169\000\170\000\175\000\171\000\174\000\
\075\000\075\000\190\000\063\000\191\000\063\000\193\000\075\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\198\000\199\000\201\000\205\000\075\000\103\000\071\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\207\000\211\000\075\000\208\000\075\000\074\000\074\000\
\074\000\209\000\210\000\215\000\222\000\084\000\084\000\074\000\
\002\000\107\000\219\000\223\000\084\000\074\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\224\000\006\000\074\000\044\000\058\000\056\000\056\000\056\000\
\008\000\060\000\009\000\039\000\012\000\056\000\056\000\026\000\
\084\000\074\000\084\000\074\000\056\000\086\000\086\000\107\000\
\109\000\056\000\028\000\092\000\086\000\202\000\220\000\194\000\
\189\000\056\000\158\000\172\000\080\000\080\000\080\000\080\000\
\080\000\080\000\080\000\080\000\080\000\080\000\173\000\000\000\
\056\000\000\000\056\000\080\000\080\000\080\000\000\000\000\000\
\086\000\000\000\086\000\080\000\080\000\000\000\000\000\000\000\
\000\000\000\000\080\000\068\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\000\000\000\000\080\000\
\000\000\000\000\068\000\068\000\068\000\000\000\000\000\000\000\
\000\000\000\000\068\000\068\000\000\000\000\000\080\000\000\000\
\080\000\068\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\065\000\000\000\000\000\068\000\000\000\
\000\000\065\000\065\000\065\000\000\000\000\000\000\000\000\000\
\000\000\065\000\065\000\000\000\000\000\068\000\000\000\068\000\
\065\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\000\000\000\000\065\000\000\000\000\000\
\047\000\047\000\047\000\000\000\000\000\000\000\000\000\000\000\
\047\000\047\000\000\000\000\000\065\000\000\000\065\000\047\000\
\103\000\103\000\103\000\103\000\103\000\103\000\103\000\103\000\
\103\000\103\000\000\000\000\000\047\000\000\000\000\000\000\000\
\103\000\103\000\000\000\000\000\000\000\000\000\000\000\103\000\
\103\000\000\000\000\000\047\000\000\000\047\000\103\000\104\000\
\104\000\104\000\104\000\104\000\104\000\104\000\104\000\104\000\
\104\000\000\000\000\000\103\000\000\000\000\000\000\000\104\000\
\104\000\000\000\000\000\000\000\000\000\000\000\104\000\104\000\
\000\000\000\000\103\000\000\000\103\000\104\000\105\000\105\000\
\105\000\105\000\105\000\105\000\105\000\105\000\105\000\105\000\
\000\000\000\000\104\000\000\000\000\000\000\000\105\000\105\000\
\000\000\000\000\000\000\000\000\000\000\105\000\105\000\000\000\
\000\000\104\000\000\000\104\000\105\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\000\000\
\000\000\105\000\000\000\000\000\000\000\106\000\106\000\000\000\
\000\000\000\000\000\000\000\000\106\000\106\000\000\000\000\000\
\105\000\000\000\105\000\106\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\000\000\000\000\000\000\000\000\
\106\000\000\000\000\000\000\000\102\000\102\000\000\000\000\000\
\000\000\000\000\000\000\102\000\102\000\000\000\000\000\106\000\
\000\000\106\000\102\000\095\000\095\000\095\000\095\000\095\000\
\095\000\000\000\000\000\000\000\096\000\096\000\096\000\096\000\
\096\000\096\000\000\000\095\000\095\000\000\000\000\000\000\000\
\000\000\000\000\095\000\095\000\096\000\096\000\102\000\000\000\
\102\000\095\000\000\000\096\000\096\000\000\000\000\000\000\000\
\000\000\000\000\096\000\097\000\097\000\097\000\097\000\097\000\
\097\000\000\000\000\000\000\000\098\000\098\000\098\000\098\000\
\098\000\098\000\000\000\097\000\097\000\095\000\000\000\095\000\
\094\000\094\000\097\000\097\000\098\000\098\000\096\000\000\000\
\096\000\097\000\000\000\098\000\098\000\000\000\000\000\000\000\
\094\000\094\000\098\000\000\000\000\000\000\000\000\000\094\000\
\094\000\000\000\000\000\000\000\018\000\000\000\094\000\019\000\
\020\000\021\000\022\000\023\000\024\000\097\000\000\000\097\000\
\000\000\000\000\000\000\000\000\000\000\000\000\098\000\018\000\
\098\000\000\000\019\000\020\000\021\000\022\000\023\000\024\000\
\000\000\000\000\094\000\000\000\094\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\000\000\
\000\000\037\000\037\000\000\000\103\000\104\000\105\000\037\000\
\039\000\071\000\000\000\037\000\000\000\000\000\000\000\000\000\
\037\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\000\000\000\000\000\000\037\000\037\000\
\107\000\037\000\037\000\037\000\000\000\000\000\037\000\037\000\
\000\000\037\000\000\000\000\000\000\000\037\000\037\000\120\000\
\000\000\037\000\037\000\000\000\037\000\037\000\037\000\037\000\
\037\000\178\000\179\000\000\000\000\000\000\000\000\000\180\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\019\000\020\000\021\000\022\000\023\000\
\024\000\000\000\000\000\000\000\000\000\000\000\181\000\039\000\
\000\000\000\000\040\000\041\000\000\000\000\000\042\000\043\000\
\000\000\044\000\000\000\000\000\000\000\182\000\183\000\000\000\
\000\000\047\000\048\000\000\000\049\000\050\000\051\000\052\000\
\053\000\042\000\044\000\000\000\000\000\042\000\000\000\000\000\
\000\000\042\000\042\000\000\000\000\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\000\000\042\000\042\000\042\000\000\000\000\000\
\042\000\042\000\000\000\042\000\000\000\000\000\000\000\042\000\
\042\000\000\000\000\000\042\000\042\000\000\000\042\000\042\000\
\042\000\042\000\042\000\035\000\000\000\000\000\000\000\036\000\
\000\000\000\000\000\000\037\000\018\000\000\000\000\000\019\000\
\020\000\021\000\022\000\023\000\024\000\000\000\000\000\000\000\
\000\000\000\000\038\000\039\000\000\000\000\000\040\000\041\000\
\000\000\000\000\042\000\043\000\000\000\044\000\000\000\000\000\
\000\000\045\000\046\000\000\000\000\000\047\000\048\000\000\000\
\049\000\050\000\051\000\052\000\053\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\000\000\
\000\000\000\000\000\000\000\000\103\000\104\000\105\000\000\000\
\000\000\000\000\000\000\000\000\000\000\106\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\103\000\104\000\105\000\
\107\000\000\000\000\000\000\000\000\000\110\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\103\000\104\000\105\000\
\000\000\107\000\000\000\000\000\000\000\111\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\103\000\104\000\105\000\
\000\000\107\000\000\000\000\000\000\000\000\000\112\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\000\000\103\000\104\000\
\105\000\107\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\000\000\121\000\000\000\000\000\
\000\000\103\000\104\000\105\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\000\000\000\000\000\000\000\000\
\160\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\000\000\000\000\107\000\000\000\000\000\
\103\000\104\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\200\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\000\000\000\000\000\000\000\000\
\000\000\103\000\104\000\105\000\107\000\000\000\000\000\000\000\
\000\000\204\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\000\000\000\000\000\000\000\000\
\000\000\103\000\104\000\105\000\000\000\107\000\000\000\000\000\
\000\000\206\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\000\000\000\000\000\000\000\000\
\000\000\103\000\104\000\105\000\000\000\107\000\000\000\000\000\
\000\000\221\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\000\000\000\000\000\000\000\000\
\000\000\103\000\104\000\105\000\000\000\107\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\103\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\102\000\
\000\000\000\000\000\000\000\000\000\000\103\000\000\000\018\000\
\000\000\107\000\019\000\020\000\021\000\022\000\023\000\024\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\040\000\041\000\000\000\000\000\042\000\043\000\000\000\
\044\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\048\000\000\000\049\000\050\000\051\000\052\000\053\000"

let yycheck = "\032\000\
\034\000\041\000\035\000\036\000\037\000\026\001\001\000\015\000\
\034\001\042\000\043\000\044\000\053\000\053\000\047\000\011\001\
\012\001\038\001\026\000\003\001\004\001\164\000\018\001\056\000\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\040\000\074\000\074\000\019\001\020\001\071\001\000\000\060\001\
\019\001\020\001\026\001\027\001\187\000\019\001\020\001\026\001\
\027\001\033\001\046\001\021\001\026\001\027\001\033\001\033\001\
\026\001\060\001\071\001\033\001\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\102\000\103\000\104\000\
\105\000\026\001\107\000\060\001\109\000\061\001\086\000\063\001\
\061\001\071\001\061\001\061\001\063\001\075\001\071\001\061\001\
\121\000\063\001\210\000\033\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\223\000\
\224\000\020\001\062\001\115\000\018\001\019\001\020\001\026\001\
\027\001\147\000\027\001\071\001\026\001\027\001\033\001\009\001\
\010\001\011\001\012\001\033\001\062\001\071\001\026\001\053\001\
\018\001\075\001\027\001\164\000\071\001\071\001\071\001\071\001\
\046\001\071\001\054\001\038\001\002\001\063\001\175\000\027\001\
\002\001\062\001\061\001\180\000\063\001\038\001\062\001\061\001\
\063\001\063\001\187\000\027\001\046\001\027\001\191\000\167\000\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\062\001\027\001\071\001\208\000\209\000\
\018\001\019\001\020\001\071\001\027\001\061\001\215\000\071\001\
\026\001\027\001\071\001\060\001\071\001\018\001\061\001\033\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\053\001\046\001\027\001\039\001\063\001\
\018\001\019\001\020\001\063\001\063\001\030\001\063\001\063\001\
\026\001\027\001\061\001\061\001\002\001\063\001\029\001\033\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\071\001\071\001\054\001\026\001\046\001\018\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\063\001\071\001\061\001\027\001\063\001\018\001\019\001\
\020\001\027\001\027\001\030\001\026\001\026\001\027\001\027\001\
\000\000\046\001\029\001\027\001\033\001\033\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\027\001\061\001\046\001\029\001\063\001\018\001\019\001\020\001\
\061\001\063\001\006\000\029\001\054\001\026\001\027\001\054\001\
\061\001\061\001\063\001\063\001\033\001\026\001\027\001\061\001\
\061\001\038\001\017\000\056\000\033\001\187\000\217\000\177\000\
\167\000\046\001\121\000\159\000\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\160\000\255\255\
\061\001\255\255\063\001\018\001\019\001\020\001\255\255\255\255\
\061\001\255\255\063\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\046\001\
\255\255\255\255\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\061\001\255\255\
\063\001\033\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\046\001\255\255\
\255\255\018\001\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\061\001\255\255\063\001\
\033\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\046\001\255\255\255\255\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\061\001\255\255\063\001\033\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\046\001\255\255\255\255\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\061\001\255\255\063\001\033\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\046\001\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\061\001\255\255\063\001\033\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\046\001\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\061\001\255\255\063\001\033\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\046\001\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\061\001\255\255\063\001\033\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\046\001\255\255\255\255\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\061\001\
\255\255\063\001\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\019\001\020\001\061\001\255\255\
\063\001\033\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\019\001\020\001\061\001\255\255\063\001\
\003\001\004\001\026\001\027\001\019\001\020\001\061\001\255\255\
\063\001\033\001\255\255\026\001\027\001\255\255\255\255\255\255\
\019\001\020\001\033\001\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\037\001\255\255\033\001\040\001\
\041\001\042\001\043\001\044\001\045\001\061\001\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\037\001\
\063\001\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\061\001\255\255\063\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\022\001\023\001\255\255\018\001\019\001\020\001\028\001\
\029\001\071\001\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\046\001\054\001\055\001\056\001\255\255\255\255\059\001\060\001\
\255\255\062\001\255\255\255\255\255\255\066\001\067\001\061\001\
\255\255\070\001\071\001\255\255\073\001\074\001\075\001\076\001\
\077\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\051\001\052\001\
\255\255\255\255\055\001\056\001\255\255\255\255\059\001\060\001\
\255\255\062\001\255\255\255\255\255\255\066\001\067\001\255\255\
\255\255\070\001\071\001\255\255\073\001\074\001\075\001\076\001\
\077\001\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\036\001\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\255\255\054\001\055\001\056\001\255\255\255\255\
\059\001\060\001\255\255\062\001\255\255\255\255\255\255\066\001\
\067\001\255\255\255\255\070\001\071\001\255\255\073\001\074\001\
\075\001\076\001\077\001\028\001\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\036\001\037\001\255\255\255\255\040\001\
\041\001\042\001\043\001\044\001\045\001\255\255\255\255\255\255\
\255\255\255\255\051\001\052\001\255\255\255\255\055\001\056\001\
\255\255\255\255\059\001\060\001\255\255\062\001\255\255\255\255\
\255\255\066\001\067\001\255\255\255\255\070\001\071\001\255\255\
\073\001\074\001\075\001\076\001\077\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\046\001\255\255\255\255\255\255\255\255\026\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\255\255\046\001\255\255\255\255\255\255\026\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\255\255\046\001\255\255\255\255\255\255\255\255\027\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\046\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\033\001\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\255\255\255\255\255\255\255\255\
\033\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\046\001\255\255\255\255\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\027\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\046\001\255\255\255\255\255\255\
\255\255\026\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\046\001\255\255\255\255\
\255\255\026\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\046\001\255\255\255\255\
\255\255\026\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\046\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\255\255\037\001\
\255\255\046\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\255\255\
\255\255\055\001\056\001\255\255\255\255\059\001\060\001\255\255\
\062\001\046\001\255\255\255\255\255\255\255\255\255\255\255\255\
\070\001\071\001\255\255\073\001\074\001\075\001\076\001\077\001"

let yynames_const = "\
  NOELSE\000\
  ASN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  EXPEQ\000\
  EXP\000\
  AND\000\
  OR\000\
  ARROW\000\
  CONTINUE\000\
  BREAK\000\
  TAB\000\
  SPACE\000\
  COLON\000\
  EOF\000\
  EOL\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  COMMA\000\
  DEF\000\
  IN\000\
  RETURN\000\
  NONE\000\
  DOT\000\
  UNION\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  TUPLE\000\
  LIST\000\
  MODULUS\000\
  SEP\000\
  CLASS\000\
  IMPORT\000\
  RANGE\000\
  DELETE\000\
  TYPE\000\
  INDENT\000\
  DEDENT\000\
  NEW\000\
  DREF\000\
  PUBLIC\000\
  PRIVATE\000\
  ADDRESS_OF\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  VIRTUAL\000\
  NULL\000\
  MAKEMANUAL\000\
  RELEASE\000\
  LBRACE\000\
  RBRACE\000\
  RETAIN\000\
  "

let yynames_block = "\
  VARIABLE\000\
  ID\000\
  Float_Lit\000\
  String_Lit\000\
  Literal\000\
  BLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_def_list) in
    Obj.repr(
# 48 "cobraparse.mly"
                    (_1)
# 748 "cobraparse.ml"
               : Ast.stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "cobraparse.mly"
   ([])
# 754 "cobraparse.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_def) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func_def_list) in
    Obj.repr(
# 52 "cobraparse.mly"
                          (_1::_2)
# 762 "cobraparse.ml"
               : 'func_def_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'list_parameter_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 56 "cobraparse.mly"
  ( Func_dynamic 
    {
      fname:_2;
      formals: _4;
      body: _8
    } 
  )
# 777 "cobraparse.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'list_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 64 "cobraparse.mly"
  (  
    Fun_def_typ
    {
      rtype: _7;
      fname: _2;
      formals: _4;
      body: _10;
    }
  
  )
# 796 "cobraparse.ml"
               : 'func_def))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "cobraparse.mly"
    ( [] )
# 802 "cobraparse.ml"
               : 'list_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt_list) in
    Obj.repr(
# 79 "cobraparse.mly"
             (  _1 )
# 809 "cobraparse.ml"
               : 'list_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_variable) in
    Obj.repr(
# 83 "cobraparse.mly"
                  ( [_1] )
# 816 "cobraparse.ml"
               : 'opt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind_variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opt_list) in
    Obj.repr(
# 84 "cobraparse.mly"
                                 ( _1 :: _3 )
# 824 "cobraparse.ml"
               : 'opt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 87 "cobraparse.mly"
             ( Bind(_1, Dyn) )
# 831 "cobraparse.ml"
               : 'bind_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 88 "cobraparse.mly"
                       ( Bind(_1, _3) )
# 839 "cobraparse.ml"
               : 'bind_variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "cobraparse.mly"
    ( [] )
# 845 "cobraparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 96 "cobraparse.mly"
                   ( _1 :: _2 )
# 853 "cobraparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "cobraparse.mly"
             ( Expr _1 )
# 860 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 100 "cobraparse.mly"
                            (Memory_REF(Makemanual, string))
# 867 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 101 "cobraparse.mly"
                         (Memory_REF(Makemanual, string))
# 874 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 102 "cobraparse.mly"
                        (Memory_manage1(Delete,_2))
# 881 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 103 "cobraparse.mly"
                                      (Memory_manage1(Delete,_4))
# 888 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compund_stmt) in
    Obj.repr(
# 104 "cobraparse.mly"
                 (_1)
# 895 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 105 "cobraparse.mly"
                     (_2)
# 902 "cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 109 "cobraparse.mly"
            (_1)
# 909 "cobraparse.ml"
               : 'compund_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_rule) in
    Obj.repr(
# 110 "cobraparse.mly"
               (_1)
# 916 "cobraparse.ml"
               : 'compund_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 114 "cobraparse.mly"
                          (_2)
# 923 "cobraparse.ml"
               : 'stmt_block_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 119 "cobraparse.mly"
                                            (While(_2, _5) )
# 931 "cobraparse.ml"
               : 'while_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'while_stmt_list) in
    Obj.repr(
# 123 "cobraparse.mly"
                                  ( While_Block(_2) )
# 938 "cobraparse.ml"
               : 'while_stmt_block_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "cobraparse.mly"
 ([])
# 944 "cobraparse.ml"
               : 'while_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'while_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_list) in
    Obj.repr(
# 127 "cobraparse.mly"
                              (_1::_2)
# 952 "cobraparse.ml"
               : 'while_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "cobraparse.mly"
             ( Expr _1 )
# 959 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt_while) in
    Obj.repr(
# 131 "cobraparse.mly"
                  (_1)
# 966 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_rule) in
    Obj.repr(
# 132 "cobraparse.mly"
               (_1)
# 973 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "cobraparse.mly"
                        (While_Memory_REF(Makemanual, _2))
# 980 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 134 "cobraparse.mly"
                     (While_Memory_REF(Release, _2))
# 987 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "cobraparse.mly"
                    (While_Memory_manage1(Delete,_2))
# 994 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "cobraparse.mly"
                                  (While_Memory_manage1(Delete,_4))
# 1001 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 137 "cobraparse.mly"
          (Break)
# 1007 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 138 "cobraparse.mly"
            (Continue)
# 1013 "cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 141 "cobraparse.mly"
                                                        ({While_if (_2,_5,$Block([])])} )
# 1021 "cobraparse.ml"
               : 'if_stmt_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'while_stmt_block_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'elif_block_list_while) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 142 "cobraparse.mly"
                                                                                                      (While_ifElif(_2,_5,While_Elif(_6),_10))
# 1031 "cobraparse.ml"
               : 'if_stmt_while))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "cobraparse.mly"
               ([])
# 1037 "cobraparse.ml"
               : 'elif_block_list_while))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif_block_while) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_block_list_while) in
    Obj.repr(
# 146 "cobraparse.mly"
                                          (_1::_2)
# 1045 "cobraparse.ml"
               : 'elif_block_list_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 149 "cobraparse.mly"
                                             (While_elif(_2,_5))
# 1053 "cobraparse.ml"
               : 'elif_block_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 157 "cobraparse.mly"
                                                 ({if (_2,_5,$Block([])])} )
# 1061 "cobraparse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_block_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'elif_block_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 158 "cobraparse.mly"
                                                                                     (ifElif(_2,_5,Elif(_6),_10))
# 1071 "cobraparse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "cobraparse.mly"
               ([])
# 1077 "cobraparse.ml"
               : 'elif_block_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif_block) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_block_list) in
    Obj.repr(
# 164 "cobraparse.mly"
                              (_1::_2)
# 1085 "cobraparse.ml"
               : 'elif_block_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 167 "cobraparse.mly"
                                       (Elif'(_2,_5))
# 1093 "cobraparse.ml"
               : 'elif_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 173 "cobraparse.mly"
       ([_1])
# 1100 "cobraparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 174 "cobraparse.mly"
                      ([_1::_3])
# 1108 "cobraparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "cobraparse.mly"
          ( Float )
# 1114 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "cobraparse.mly"
        ( Int )
# 1120 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "cobraparse.mly"
         ( Bool )
# 1126 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "cobraparse.mly"
           ( String )
# 1132 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "cobraparse.mly"
          (Tuple)
# 1138 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "cobraparse.mly"
         (List)
# 1144 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "cobraparse.mly"
         (None)
# 1150 "cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 187 "cobraparse.mly"
                      ([(_1,_3)])
# 1158 "cobraparse.ml"
               : 'all_dot_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'all_dot_ops) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 188 "cobraparse.mly"
                           (_1::_3)
# 1166 "cobraparse.ml"
               : 'all_dot_ops))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "cobraparse.mly"
              ([])
# 1172 "cobraparse.ml"
               : 'array_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_arg) in
    Obj.repr(
# 192 "cobraparse.mly"
             (_1)
# 1179 "cobraparse.ml"
               : 'array_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "cobraparse.mly"
        ([_1])
# 1186 "cobraparse.ml"
               : 'array_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_arg) in
    Obj.repr(
# 196 "cobraparse.mly"
                       (_1::_3)
# 1194 "cobraparse.ml"
               : 'array_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 199 "cobraparse.mly"
          (Id _1)
# 1201 "cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_dot_ops) in
    Obj.repr(
# 200 "cobraparse.mly"
              (Dot _1)
# 1208 "cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'all_Dref) in
    Obj.repr(
# 201 "cobraparse.mly"
                         (_2)
# 1215 "cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 205 "cobraparse.mly"
    (Type _1)
# 1222 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 206 "cobraparse.mly"
                            (Arr_cons(_1,Literal(_3)))
# 1230 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 207 "cobraparse.mly"
                             (Arr_Var(_1,_3))
# 1238 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 208 "cobraparse.mly"
           (Var _1)
# 1245 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 209 "cobraparse.mly"
                                  (Arr_Var(_1,Literal(_3)))
# 1253 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 210 "cobraparse.mly"
                                   (Arr_Var_Const(_1,_3))
# 1261 "cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 215 "cobraparse.mly"
          (Bind(_1,Dynamic))
# 1268 "cobraparse.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 216 "cobraparse.mly"
                     (Bind(_1,_3))
# 1276 "cobraparse.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_Dref) in
    Obj.repr(
# 217 "cobraparse.mly"
                     (Memory_manage(Deref, All_Dref _2))
# 1283 "cobraparse.ml"
               : 'lvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 220 "cobraparse.mly"
           (Variable(Bind(_1,Dynamic)))
# 1290 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 221 "cobraparse.mly"
                     (Variable(Bind(_1,_3)))
# 1298 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_simple_assignment) in
    Obj.repr(
# 222 "cobraparse.mly"
                        (_1)
# 1305 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 223 "cobraparse.mly"
                     (_2)
# 1312 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 224 "cobraparse.mly"
                                  ( Func_call (_1, _3)  )
# 1320 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 225 "cobraparse.mly"
                                               (Class_Method (_1, _3,_5))
# 1329 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_dot_ops) in
    Obj.repr(
# 226 "cobraparse.mly"
              ( Dot_ops (_1))
# 1336 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_Dref) in
    Obj.repr(
# 227 "cobraparse.mly"
                  (Memory_manage (Deref, All_Dref _2))
# 1343 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_new_op) in
    Obj.repr(
# 228 "cobraparse.mly"
                 (Memory_manage (New, All_new_ops _2))
# 1350 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 229 "cobraparse.mly"
                  (Memory_manage (Address, Expr' _2))
# 1357 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lvalue) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 230 "cobraparse.mly"
                  (Asn (_1,_3))
# 1365 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 231 "cobraparse.mly"
                             (Custom_types(_2,_4))
# 1373 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 232 "cobraparse.mly"
                                               (Array_assign(_1,_2,_4,_7))
# 1383 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "cobraparse.mly"
              (Memory_manage (Retain, Expr' _2))
# 1390 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 235 "cobraparse.mly"
            (Float_literal (_1))
# 1397 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array_element) in
    Obj.repr(
# 236 "cobraparse.mly"
                              ( Array(_2) )
# 1404 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 237 "cobraparse.mly"
       (Bool _1)
# 1411 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 238 "cobraparse.mly"
          (Literal(_1))
# 1418 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 239 "cobraparse.mly"
              ( Stirng_literal (_1))
# 1425 "cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 245 "cobraparse.mly"
               ( Binop(_1, Eq, _3) )
# 1433 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 246 "cobraparse.mly"
                ( Binop(_1, Neq, _3) )
# 1441 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 247 "cobraparse.mly"
              ( Binop(_1, Less, _3) )
# 1449 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 248 "cobraparse.mly"
               ( Binop(_1, Greater, _3) )
# 1457 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 249 "cobraparse.mly"
                ( Binop(_1, Leq, _3) )
# 1465 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 250 "cobraparse.mly"
                ( Binop(_1, Geq, _3) )
# 1473 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 251 "cobraparse.mly"
                ( Binop(_1, And, _3) )
# 1481 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 252 "cobraparse.mly"
               ( Binop(_1, Or, _3) )
# 1489 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 253 "cobraparse.mly"
                 ( Binop(_1, Add, _3) )
# 1497 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 254 "cobraparse.mly"
                  ( Binop(_1, Sub, _3) )
# 1505 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 255 "cobraparse.mly"
                  ( Binop(_1, Mul, _3) )
# 1513 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 256 "cobraparse.mly"
                   ( Binop(_1, Div, _3) )
# 1521 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 257 "cobraparse.mly"
                ( Binop(_1, Exp, _3) )
# 1529 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 258 "cobraparse.mly"
                     ( Binop(_1, Mod, _3) )
# 1537 "cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "cobraparse.mly"
([])
# 1543 "cobraparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 263 "cobraparse.mly"
       ( _1 )
# 1550 "cobraparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 266 "cobraparse.mly"
      ( [_1] )
# 1557 "cobraparse.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 267 "cobraparse.mly"
                    ( _1::_3 )
# 1565 "cobraparse.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.stmt)
