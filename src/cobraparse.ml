type token =
  | NOELSE
  | ASN
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | EXPEQ
  | EXP
  | AND
  | OR
  | ARROW
  | CONTINUE
  | BREAK
  | TAB
  | SPACE
  | COLON
  | EOF
  | EOL
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | COMMA
  | DEF
  | IN
  | RETURN
  | NONE
  | DOT
  | UNION
  | BOOL
  | INT
  | FLOAT
  | STRING
  | TUPLE
  | LIST
  | MODULUS
  | SEP
  | CLASS
  | IMPORT
  | RANGE
  | DELETE
  | TYPE
  | INDENT
  | DEDENT
  | NEW
  | DREF
  | PUBLIC
  | PRIVATE
  | ADDRESS_OF
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | VIRTUAL
  | NULL
  | MAKEMANUAL
  | RELEASE
  | LBRACE
  | RBRACE
  | RETAIN
  | VARIABLE of (
# 15 "src/cobraparse.mly"
        string
# 77 "src/cobraparse.ml"
)
  | ID of (
# 16 "src/cobraparse.mly"
        string
# 82 "src/cobraparse.ml"
)
  | Float_Lit of (
# 18 "src/cobraparse.mly"
        float
# 87 "src/cobraparse.ml"
)
  | String_Lit of (
# 19 "src/cobraparse.mly"
        string
# 92 "src/cobraparse.ml"
)
  | Literal of (
# 20 "src/cobraparse.mly"
        int
# 97 "src/cobraparse.ml"
)
  | BLIT of (
# 21 "src/cobraparse.mly"
        bool
# 102 "src/cobraparse.ml"
)

open Parsing
let _ = parse_error;;
# 1 "src/cobraparse.mly"
 
	open Ast
# 110 "src/cobraparse.ml"
let yytransl_const = [|
  257 (* NOELSE *);
  258 (* ASN *);
  259 (* EQ *);
  260 (* NEQ *);
  261 (* LT *);
  262 (* GT *);
  263 (* LEQ *);
  264 (* GEQ *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* PLUSEQ *);
  270 (* MINUSEQ *);
  271 (* TIMESEQ *);
  272 (* DIVIDEEQ *);
  273 (* EXPEQ *);
  274 (* EXP *);
  275 (* AND *);
  276 (* OR *);
  277 (* ARROW *);
  278 (* CONTINUE *);
  279 (* BREAK *);
  280 (* TAB *);
  281 (* SPACE *);
  282 (* COLON *);
    0 (* EOF *);
  283 (* EOL *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* ELIF *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* COMMA *);
  290 (* DEF *);
  291 (* IN *);
  292 (* RETURN *);
  293 (* NONE *);
  294 (* DOT *);
  295 (* UNION *);
  296 (* BOOL *);
  297 (* INT *);
  298 (* FLOAT *);
  299 (* STRING *);
  300 (* TUPLE *);
  301 (* LIST *);
  302 (* MODULUS *);
  303 (* SEP *);
  304 (* CLASS *);
  305 (* IMPORT *);
  306 (* RANGE *);
  307 (* DELETE *);
  308 (* TYPE *);
  309 (* INDENT *);
  310 (* DEDENT *);
  311 (* NEW *);
  312 (* DREF *);
  313 (* PUBLIC *);
  314 (* PRIVATE *);
  315 (* ADDRESS_OF *);
  316 (* LPAREN *);
  317 (* RPAREN *);
  318 (* LBRACK *);
  319 (* RBRACK *);
  320 (* VIRTUAL *);
  321 (* NULL *);
  322 (* MAKEMANUAL *);
  323 (* RELEASE *);
  324 (* LBRACE *);
  325 (* RBRACE *);
  326 (* RETAIN *);
    0|]

let yytransl_block = [|
  327 (* VARIABLE *);
  328 (* ID *);
  329 (* Float_Lit *);
  330 (* String_Lit *);
  331 (* Literal *);
  332 (* BLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\007\000\006\000\008\000\009\000\009\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\011\000\011\000\
\012\000\012\000\013\000\005\000\005\000\014\000\014\000\015\000\
\016\000\016\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\018\000\018\000\019\000\019\000\021\000\021\000\021\000\
\022\000\022\000\022\000\022\000\022\000\022\000\020\000\020\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\024\000\024\000\025\000\025\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\002\000\002\000\004\000\
\001\000\001\000\003\000\005\000\003\000\000\000\002\000\002\000\
\001\000\001\000\002\000\002\000\001\000\001\000\005\000\010\000\
\000\000\002\000\005\000\005\000\010\000\000\000\002\000\005\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\000\000\001\000\001\000\001\000\003\000\
\001\000\004\000\004\000\001\000\004\000\004\000\001\000\003\000\
\001\000\003\000\001\000\003\000\004\000\006\000\001\000\002\000\
\002\000\002\000\003\000\005\000\004\000\004\000\007\000\002\000\
\001\000\003\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\041\000\037\000\036\000\035\000\
\038\000\039\000\040\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\073\000\077\000\
\076\000\075\000\000\000\096\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\059\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\065\000\000\000\000\000\000\000\000\000\
\066\000\000\000\000\000\000\000\045\000\005\000\006\000\072\000\
\000\000\000\000\000\000\000\000\064\000\001\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\074\000\000\000\000\000\000\000\000\000\
\000\000\093\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\000\000\008\000\070\000\000\000\000\000\
\000\000\000\000\000\000\048\000\042\000\000\000\056\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\012\000\
\000\000\054\000\053\000\051\000\050\000\000\000\000\000\095\000\
\000\000\000\000\000\000\000\000\000\000\022\000\021\000\000\000\
\000\000\000\000\000\000\018\000\000\000\000\000\017\000\034\000\
\062\000\000\000\011\000\000\000\000\000\031\000\000\000\019\000\
\020\000\016\000\013\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\026\000\000\000\000\000\000\000\000\000\
\027\000\024\000"

let yydgoto = "\002\000\
\028\000\029\000\030\000\031\000\032\000\033\000\134\000\136\000\
\157\000\158\000\159\000\184\000\185\000\148\000\149\000\118\000\
\034\000\035\000\052\000\053\000\048\000\044\000\036\000\097\000\
\098\000"

let yysindex = "\008\000\
\102\002\000\000\169\003\169\003\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\225\254\221\254\193\003\228\254\169\003\
\169\003\169\003\226\254\231\254\169\003\016\255\000\000\000\000\
\000\000\000\000\228\254\000\000\053\000\102\002\177\002\000\000\
\000\000\240\254\019\255\000\000\202\002\226\002\251\254\000\000\
\080\255\021\255\022\255\000\000\228\254\047\255\019\255\085\255\
\000\000\241\001\250\002\023\255\000\000\000\000\000\000\000\000\
\169\003\001\003\031\255\169\003\000\000\000\000\000\000\169\003\
\169\003\169\003\169\003\169\003\169\003\169\003\169\003\169\003\
\169\003\169\003\169\003\169\003\000\000\169\003\027\255\042\255\
\087\255\091\255\048\255\001\003\195\254\220\254\059\255\050\255\
\169\003\000\000\169\003\000\000\142\003\130\255\073\255\014\003\
\075\255\000\000\016\000\016\000\221\255\221\255\221\255\221\255\
\094\255\094\255\119\255\119\255\119\255\186\003\162\003\119\255\
\067\255\000\000\086\255\090\255\000\000\000\000\105\255\093\255\
\096\255\110\255\111\255\000\000\000\000\142\003\000\000\169\003\
\169\003\169\003\000\000\113\255\102\002\123\255\052\002\000\000\
\001\003\000\000\000\000\000\000\000\000\142\003\114\255\000\000\
\152\255\127\255\169\003\148\255\123\255\000\000\000\000\169\003\
\117\255\118\255\045\003\000\000\136\255\052\002\000\000\000\000\
\000\000\169\003\000\000\070\003\158\255\000\000\094\003\000\000\
\000\000\000\000\000\000\000\000\142\003\164\255\165\255\177\255\
\086\255\086\255\090\255\000\000\000\000\175\255\169\003\183\255\
\175\255\118\003\187\255\000\000\188\255\189\255\090\255\090\255\
\000\000\000\000"

let yyrindex = "\000\000\
\219\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\157\255\000\000\000\000\000\000\231\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
\000\000\107\000\138\000\000\000\000\000\089\255\160\255\000\000\
\000\000\000\000\159\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\166\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\255\169\000\191\255\167\255\
\000\000\000\000\122\255\210\001\242\255\161\001\170\001\201\001\
\018\255\130\001\006\001\037\001\068\001\242\254\084\255\099\001\
\000\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\
\000\000\000\000\000\000\000\000\000\000\181\255\000\000\000\000\
\166\255\000\000\000\000\000\000\171\255\001\000\172\255\000\000\
\000\000\000\000\000\000\000\000\000\000\230\255\000\000\000\000\
\000\000\000\000\000\000\000\000\205\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\172\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\196\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\252\001\000\000\000\000\
\206\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\226\255\000\000\255\255\000\000\128\255\112\255\125\255\
\078\000\000\000\000\000\055\000\000\000\089\000\000\000\104\000\
\250\255\035\000\000\000\152\000\240\255\000\000\000\000\122\000\
\123\000"

let yytablesize = 1288
let yytable = "\063\000\
\028\000\037\000\038\000\002\000\084\000\084\000\156\000\043\000\
\001\000\120\000\061\000\084\000\084\000\121\000\049\000\050\000\
\051\000\057\000\084\000\056\000\086\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\087\000\156\000\039\000\045\000\
\180\000\181\000\122\000\041\000\086\000\086\000\123\000\040\000\
\054\000\058\000\046\000\086\000\086\000\055\000\084\000\182\000\
\084\000\047\000\086\000\094\000\062\000\059\000\079\000\093\000\
\080\000\083\000\096\000\193\000\194\000\047\000\099\000\100\000\
\101\000\102\000\103\000\104\000\105\000\106\000\107\000\108\000\
\109\000\110\000\111\000\060\000\112\000\119\000\086\000\047\000\
\086\000\084\000\085\000\086\000\088\000\092\000\089\000\126\000\
\113\000\051\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\095\000\146\000\085\000\
\072\000\073\000\046\000\046\000\046\000\085\000\085\000\074\000\
\114\000\115\000\046\000\046\000\085\000\116\000\117\000\124\000\
\125\000\046\000\067\000\067\000\078\000\078\000\142\000\096\000\
\096\000\067\000\119\000\128\000\129\000\155\000\046\000\131\000\
\074\000\132\000\133\000\078\000\078\000\078\000\135\000\137\000\
\085\000\164\000\085\000\078\000\078\000\046\000\167\000\046\000\
\147\000\162\000\078\000\138\000\155\000\067\000\139\000\067\000\
\173\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\140\000\141\000\161\000\145\000\
\165\000\047\000\047\000\047\000\163\000\186\000\078\000\175\000\
\078\000\047\000\047\000\168\000\169\000\171\000\177\000\178\000\
\047\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\179\000\183\000\047\000\069\000\069\000\
\042\000\042\000\042\000\187\000\190\000\069\000\191\000\192\000\
\042\000\042\000\002\000\044\000\047\000\055\000\047\000\042\000\
\002\000\014\000\092\000\094\000\042\000\070\000\071\000\072\000\
\073\000\030\000\025\000\172\000\042\000\166\000\074\000\188\000\
\160\000\069\000\127\000\069\000\080\000\080\000\080\000\080\000\
\080\000\080\000\143\000\042\000\144\000\042\000\000\000\068\000\
\068\000\000\000\000\000\000\000\080\000\080\000\068\000\000\000\
\000\000\000\000\078\000\080\000\080\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\028\000\030\000\000\000\000\000\
\028\000\074\000\068\000\000\000\068\000\028\000\000\000\000\000\
\028\000\028\000\028\000\028\000\028\000\028\000\080\000\000\000\
\080\000\000\000\000\000\028\000\028\000\000\000\028\000\028\000\
\028\000\002\000\000\000\028\000\028\000\078\000\028\000\000\000\
\000\000\000\000\028\000\028\000\000\000\000\000\028\000\028\000\
\000\000\028\000\028\000\028\000\028\000\028\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\063\000\
\000\000\000\000\000\000\000\000\000\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\063\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\063\000\000\000\000\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\052\000\052\000\000\000\000\000\
\063\000\000\000\063\000\052\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\052\000\000\000\000\000\049\000\049\000\049\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\000\000\000\000\052\000\
\000\000\052\000\049\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\000\000\049\000\
\000\000\000\000\058\000\058\000\058\000\000\000\000\000\000\000\
\000\000\000\000\058\000\058\000\000\000\000\000\049\000\000\000\
\049\000\058\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\000\000\058\000\000\000\
\000\000\033\000\033\000\033\000\000\000\071\000\071\000\000\000\
\000\000\033\000\033\000\000\000\071\000\058\000\000\000\058\000\
\033\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\000\000\000\000\033\000\000\000\000\000\
\057\000\057\000\057\000\000\000\000\000\000\000\000\000\000\000\
\071\000\057\000\071\000\000\000\033\000\000\000\033\000\057\000\
\088\000\088\000\088\000\088\000\088\000\088\000\088\000\088\000\
\088\000\088\000\000\000\000\000\057\000\000\000\000\000\000\000\
\088\000\088\000\000\000\000\000\000\000\000\000\000\000\088\000\
\088\000\000\000\000\000\057\000\000\000\057\000\088\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\000\000\000\000\088\000\000\000\000\000\000\000\089\000\
\089\000\000\000\000\000\000\000\000\000\000\000\089\000\089\000\
\000\000\000\000\088\000\000\000\088\000\089\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\000\000\000\000\089\000\000\000\000\000\000\000\090\000\090\000\
\000\000\000\000\000\000\000\000\000\000\090\000\090\000\000\000\
\000\000\089\000\000\000\089\000\090\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\000\000\
\000\000\090\000\000\000\000\000\000\000\091\000\091\000\000\000\
\000\000\000\000\000\000\000\000\091\000\091\000\000\000\000\000\
\090\000\000\000\090\000\091\000\087\000\087\000\087\000\087\000\
\087\000\087\000\087\000\087\000\000\000\000\000\000\000\000\000\
\091\000\000\000\000\000\000\000\087\000\087\000\000\000\000\000\
\000\000\000\000\000\000\087\000\087\000\000\000\000\000\091\000\
\000\000\091\000\087\000\081\000\081\000\081\000\081\000\081\000\
\081\000\000\000\000\000\000\000\082\000\082\000\082\000\082\000\
\082\000\082\000\000\000\081\000\081\000\000\000\000\000\000\000\
\000\000\000\000\081\000\081\000\082\000\082\000\087\000\000\000\
\087\000\081\000\000\000\082\000\082\000\000\000\000\000\000\000\
\000\000\000\000\082\000\083\000\083\000\083\000\083\000\083\000\
\083\000\000\000\000\000\000\000\079\000\079\000\000\000\000\000\
\000\000\000\000\000\000\083\000\083\000\081\000\000\000\081\000\
\000\000\000\000\083\000\083\000\079\000\079\000\082\000\000\000\
\082\000\083\000\000\000\079\000\079\000\000\000\000\000\000\000\
\000\000\000\000\079\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\083\000\000\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\000\
\079\000\023\000\023\000\000\000\000\000\000\000\000\000\023\000\
\025\000\000\000\000\000\023\000\000\000\000\000\078\000\000\000\
\023\000\000\000\000\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\000\000\000\000\000\000\090\000\000\000\023\000\
\000\000\023\000\023\000\023\000\000\000\000\000\023\000\023\000\
\000\000\023\000\000\000\000\000\000\000\023\000\023\000\000\000\
\000\000\023\000\023\000\000\000\023\000\023\000\023\000\023\000\
\023\000\150\000\151\000\000\000\000\000\000\000\000\000\152\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\014\000\015\000\000\000\000\000\016\000\017\000\
\000\000\018\000\000\000\000\000\000\000\153\000\154\000\000\000\
\000\000\021\000\022\000\000\000\023\000\024\000\025\000\026\000\
\027\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\006\000\007\000\008\000\
\009\000\010\000\011\000\000\000\000\000\000\000\000\000\000\000\
\012\000\013\000\000\000\000\000\014\000\015\000\000\000\000\000\
\016\000\017\000\000\000\018\000\000\000\000\000\000\000\019\000\
\020\000\000\000\000\000\021\000\022\000\000\000\023\000\024\000\
\025\000\026\000\027\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\000\000\
\000\000\000\000\074\000\075\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\077\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\074\000\075\000\076\000\078\000\000\000\
\000\000\000\000\000\000\081\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\074\000\075\000\076\000\000\000\078\000\
\000\000\000\000\000\000\082\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\074\000\075\000\076\000\000\000\078\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\091\000\000\000\000\000\000\000\000\000\074\000\
\075\000\076\000\000\000\000\000\000\000\005\000\000\000\078\000\
\006\000\007\000\008\000\009\000\010\000\011\000\130\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\078\000\000\000\000\000\074\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\170\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\000\000\074\000\
\075\000\076\000\078\000\000\000\000\000\000\000\000\000\174\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\000\000\074\000\
\075\000\076\000\000\000\078\000\000\000\000\000\000\000\176\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\000\000\074\000\
\075\000\076\000\000\000\078\000\000\000\000\000\000\000\189\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\000\000\000\000\000\000\074\000\
\075\000\076\000\000\000\078\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\074\000\075\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\074\000\000\000\005\000\000\000\078\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\014\000\
\015\000\000\000\000\000\016\000\017\000\005\000\018\000\078\000\
\006\000\007\000\008\000\009\000\010\000\011\000\021\000\022\000\
\000\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000"

let yycheck = "\030\000\
\000\000\003\000\004\000\000\000\019\001\020\001\135\000\014\000\
\001\000\071\001\027\000\026\001\027\001\075\001\016\000\017\000\
\018\000\002\001\033\001\021\000\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\045\000\158\000\062\001\060\001\
\177\000\178\000\071\001\071\001\019\001\020\001\075\001\071\001\
\071\001\026\001\071\001\026\001\027\001\071\001\061\001\179\000\
\063\001\015\000\033\001\058\000\000\000\038\001\071\001\057\000\
\038\001\063\001\060\000\191\000\192\000\027\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\060\001\078\000\084\000\061\001\045\000\
\063\001\002\001\062\001\062\001\038\001\063\001\002\001\089\000\
\062\001\091\000\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\071\001\133\000\020\001\
\011\001\012\001\018\001\019\001\020\001\026\001\027\001\018\001\
\071\001\027\001\026\001\027\001\033\001\027\001\071\001\061\001\
\071\001\033\001\026\001\027\001\003\001\004\001\128\000\129\000\
\130\000\033\001\137\000\002\001\060\001\135\000\046\001\061\001\
\018\001\071\001\053\001\046\001\019\001\020\001\053\001\039\001\
\061\001\147\000\063\001\026\001\027\001\061\001\152\000\063\001\
\030\001\002\001\033\001\063\001\158\000\061\001\063\001\063\001\
\162\000\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\063\001\063\001\061\001\063\001\
\029\001\018\001\019\001\020\001\054\001\183\000\061\001\026\001\
\063\001\026\001\027\001\071\001\071\001\054\001\027\001\027\001\
\033\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\027\001\030\001\046\001\026\001\027\001\
\018\001\019\001\020\001\029\001\026\001\033\001\027\001\027\001\
\026\001\027\001\000\000\063\001\061\001\063\001\063\001\033\001\
\054\001\054\001\061\001\061\001\038\001\009\001\010\001\011\001\
\012\001\029\001\029\001\158\000\046\001\149\000\018\001\185\000\
\137\000\061\001\091\000\063\001\003\001\004\001\005\001\006\001\
\007\001\008\001\129\000\061\001\130\000\063\001\255\255\026\001\
\027\001\255\255\255\255\255\255\019\001\020\001\033\001\255\255\
\255\255\255\255\046\001\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\255\255\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\028\001\029\001\255\255\255\255\
\032\001\018\001\061\001\255\255\063\001\037\001\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\061\001\255\255\
\063\001\255\255\255\255\051\001\052\001\255\255\054\001\055\001\
\056\001\054\001\255\255\059\001\060\001\046\001\062\001\255\255\
\255\255\255\255\066\001\067\001\255\255\255\255\070\001\071\001\
\255\255\073\001\074\001\075\001\076\001\077\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\033\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\046\001\255\255\255\255\018\001\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\061\001\255\255\063\001\033\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\046\001\255\255\255\255\018\001\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\061\001\
\255\255\063\001\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\046\001\
\255\255\255\255\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\061\001\255\255\
\063\001\033\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\046\001\255\255\
\255\255\018\001\019\001\020\001\255\255\026\001\027\001\255\255\
\255\255\026\001\027\001\255\255\033\001\061\001\255\255\063\001\
\033\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\046\001\255\255\255\255\
\018\001\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\061\001\027\001\063\001\255\255\061\001\255\255\063\001\033\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\046\001\255\255\255\255\255\255\
\019\001\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\061\001\255\255\063\001\033\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\046\001\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\061\001\255\255\063\001\033\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\255\255\046\001\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\061\001\255\255\063\001\033\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\046\001\255\255\255\255\255\255\019\001\020\001\255\255\
\255\255\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\061\001\255\255\063\001\033\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\046\001\255\255\255\255\255\255\019\001\020\001\255\255\255\255\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\061\001\
\255\255\063\001\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\008\001\255\255\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\026\001\027\001\019\001\020\001\061\001\255\255\
\063\001\033\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\003\001\004\001\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\061\001\255\255\063\001\
\255\255\255\255\026\001\027\001\019\001\020\001\061\001\255\255\
\063\001\033\001\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\061\001\255\255\063\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\063\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\032\001\255\255\255\255\046\001\255\255\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\061\001\255\255\052\001\
\255\255\054\001\055\001\056\001\255\255\255\255\059\001\060\001\
\255\255\062\001\255\255\255\255\255\255\066\001\067\001\255\255\
\255\255\070\001\071\001\255\255\073\001\074\001\075\001\076\001\
\077\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\255\255\255\255\055\001\056\001\255\255\255\255\059\001\060\001\
\255\255\062\001\255\255\255\255\255\255\066\001\067\001\255\255\
\255\255\070\001\071\001\255\255\073\001\074\001\075\001\076\001\
\077\001\028\001\255\255\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\255\255\040\001\041\001\042\001\
\043\001\044\001\045\001\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\255\255\255\255\055\001\056\001\255\255\255\255\
\059\001\060\001\255\255\062\001\255\255\255\255\255\255\066\001\
\067\001\255\255\255\255\070\001\071\001\255\255\073\001\074\001\
\075\001\076\001\077\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\046\001\255\255\
\255\255\255\255\255\255\026\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\255\255\046\001\
\255\255\255\255\255\255\026\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\020\001\255\255\046\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\033\001\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\255\255\255\255\037\001\255\255\046\001\
\040\001\041\001\042\001\043\001\044\001\045\001\033\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\046\001\255\255\255\255\018\001\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\046\001\255\255\255\255\255\255\255\255\026\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\046\001\255\255\255\255\255\255\026\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\046\001\255\255\255\255\255\255\026\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\020\001\255\255\046\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\046\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\037\001\255\255\046\001\
\040\001\041\001\042\001\043\001\044\001\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\255\255\255\255\055\001\
\056\001\255\255\255\255\059\001\060\001\037\001\062\001\046\001\
\040\001\041\001\042\001\043\001\044\001\045\001\070\001\071\001\
\255\255\073\001\074\001\075\001\076\001\077\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\071\001"

let yynames_const = "\
  NOELSE\000\
  ASN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  EXPEQ\000\
  EXP\000\
  AND\000\
  OR\000\
  ARROW\000\
  CONTINUE\000\
  BREAK\000\
  TAB\000\
  SPACE\000\
  COLON\000\
  EOF\000\
  EOL\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  COMMA\000\
  DEF\000\
  IN\000\
  RETURN\000\
  NONE\000\
  DOT\000\
  UNION\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  TUPLE\000\
  LIST\000\
  MODULUS\000\
  SEP\000\
  CLASS\000\
  IMPORT\000\
  RANGE\000\
  DELETE\000\
  TYPE\000\
  INDENT\000\
  DEDENT\000\
  NEW\000\
  DREF\000\
  PUBLIC\000\
  PRIVATE\000\
  ADDRESS_OF\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  VIRTUAL\000\
  NULL\000\
  MAKEMANUAL\000\
  RELEASE\000\
  LBRACE\000\
  RBRACE\000\
  RETAIN\000\
  "

let yynames_block = "\
  VARIABLE\000\
  ID\000\
  Float_Lit\000\
  String_Lit\000\
  Literal\000\
  BLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 47 "src/cobraparse.mly"
               ( {body=_1} )
# 732 "src/cobraparse.ml"
               : Ast.stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 50 "src/cobraparse.mly"
    ( [] )
# 738 "src/cobraparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 51 "src/cobraparse.mly"
                   ( _1 :: _2 )
# 746 "src/cobraparse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "src/cobraparse.mly"
             ( Expr _1 )
# 753 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "src/cobraparse.mly"
                        (Memory_REF(Makemanual, (Bind(_2,Dynamic))))
# 760 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "src/cobraparse.mly"
                     (Memory_REF(Makemanual, (Bind(_2,Dynamic))))
# 767 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "src/cobraparse.mly"
                    (Memory_manage(Delete,_2))
# 774 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "src/cobraparse.mly"
                                  (Memory_manage(Delete,_4))
# 781 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
    Obj.repr(
# 59 "src/cobraparse.mly"
            (_1)
# 788 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_rule) in
    Obj.repr(
# 60 "src/cobraparse.mly"
               (_1)
# 795 "src/cobraparse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 64 "src/cobraparse.mly"
                          (_2)
# 802 "src/cobraparse.ml"
               : 'stmt_block_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 69 "src/cobraparse.mly"
                                            (While(_2, _5) )
# 810 "src/cobraparse.ml"
               : 'while_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'while_stmt_list) in
    Obj.repr(
# 73 "src/cobraparse.mly"
                                  ( Block(_2) )
# 817 "src/cobraparse.ml"
               : 'while_stmt_block_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "src/cobraparse.mly"
 ([])
# 823 "src/cobraparse.ml"
               : 'while_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'while_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_list) in
    Obj.repr(
# 77 "src/cobraparse.mly"
                              (_1::_2)
# 831 "src/cobraparse.ml"
               : 'while_stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 80 "src/cobraparse.mly"
             ( Expr _1 )
# 838 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt_while) in
    Obj.repr(
# 81 "src/cobraparse.mly"
                  (_1)
# 845 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_rule) in
    Obj.repr(
# 82 "src/cobraparse.mly"
               (_1)
# 852 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 83 "src/cobraparse.mly"
                        (Memory_REF(Makemanual, (Bind(_2,Dynamic))))
# 859 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 84 "src/cobraparse.mly"
                     (Memory_REF(Makemanual, (Bind(_2,Dynamic))))
# 866 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "src/cobraparse.mly"
          (Break)
# 872 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 86 "src/cobraparse.mly"
            (Continue)
# 878 "src/cobraparse.ml"
               : 'while_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 89 "src/cobraparse.mly"
                                                       ({if (_2,_5,$Block([])])} )
# 886 "src/cobraparse.ml"
               : 'if_stmt_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'while_stmt_block_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'elif_block_list_while) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 90 "src/cobraparse.mly"
                                                                                                     (ifElif(_2,_5,Elif(_6),_10))
# 896 "src/cobraparse.ml"
               : 'if_stmt_while))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "src/cobraparse.mly"
               ([])
# 902 "src/cobraparse.ml"
               : 'elif_block_list_while))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif_block_while) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_block_list_while) in
    Obj.repr(
# 94 "src/cobraparse.mly"
                                          (_1::_2)
# 910 "src/cobraparse.ml"
               : 'elif_block_list_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt_block_list) in
    Obj.repr(
# 97 "src/cobraparse.mly"
                                             (elif(_2,_5))
# 918 "src/cobraparse.ml"
               : 'elif_block_while))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 105 "src/cobraparse.mly"
                                                 ({if (_2,_5,$Block([])])} )
# 926 "src/cobraparse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_block_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'elif_block_list) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 106 "src/cobraparse.mly"
                                                                                     (ifElif(_2,_5,Elif(_6),_10))
# 936 "src/cobraparse.ml"
               : 'if_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "src/cobraparse.mly"
               ([])
# 942 "src/cobraparse.ml"
               : 'elif_block_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'elif_block) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'elif_block_list) in
    Obj.repr(
# 112 "src/cobraparse.mly"
                              (_1::_2)
# 950 "src/cobraparse.ml"
               : 'elif_block_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 115 "src/cobraparse.mly"
                                       (elif(_2,_5))
# 958 "src/cobraparse.ml"
               : 'elif_block))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 121 "src/cobraparse.mly"
       ([_1])
# 965 "src/cobraparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 122 "src/cobraparse.mly"
                      ([_1::_3])
# 973 "src/cobraparse.ml"
               : 'typ_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "src/cobraparse.mly"
          ( Float )
# 979 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 127 "src/cobraparse.mly"
        ( Int )
# 985 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "src/cobraparse.mly"
         ( Bool )
# 991 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "src/cobraparse.mly"
           ( String )
# 997 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "src/cobraparse.mly"
          (Tuple)
# 1003 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "src/cobraparse.mly"
         (List)
# 1009 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "src/cobraparse.mly"
         (None)
# 1015 "src/cobraparse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 135 "src/cobraparse.mly"
                      ((_1,_3))
# 1023 "src/cobraparse.ml"
               : 'all_dot_ops))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'all_dot_ops) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "src/cobraparse.mly"
                           ((_1,_3))
# 1031 "src/cobraparse.ml"
               : 'all_dot_ops))
; (fun __caml_parser_env ->
    Obj.repr(
# 139 "src/cobraparse.mly"
             ([])
# 1037 "src/cobraparse.ml"
               : 'array_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_arg) in
    Obj.repr(
# 140 "src/cobraparse.mly"
            (_1)
# 1044 "src/cobraparse.ml"
               : 'array_element))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 143 "src/cobraparse.mly"
          (Bind(_1,Dynamic))
# 1051 "src/cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_dot_ops) in
    Obj.repr(
# 144 "src/cobraparse.mly"
              (_1)
# 1058 "src/cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'all_Dref) in
    Obj.repr(
# 145 "src/cobraparse.mly"
                         (_2)
# 1065 "src/cobraparse.ml"
               : 'all_Dref))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 149 "src/cobraparse.mly"
    (_1)
# 1072 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 150 "src/cobraparse.mly"
                            ((_1,Literal(_3)))
# 1080 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 151 "src/cobraparse.mly"
                             ((_1,_3))
# 1088 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "src/cobraparse.mly"
           (_1)
# 1095 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 153 "src/cobraparse.mly"
                                  ((_1,Literal(_3)))
# 1103 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 154 "src/cobraparse.mly"
                                   ((_1,_3))
# 1111 "src/cobraparse.ml"
               : 'all_new_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "src/cobraparse.mly"
        ([_1])
# 1118 "src/cobraparse.ml"
               : 'array_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_arg) in
    Obj.repr(
# 158 "src/cobraparse.mly"
                       (_1::_3)
# 1126 "src/cobraparse.ml"
               : 'array_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 162 "src/cobraparse.mly"
           (Bind(_1,Dynamic))
# 1133 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 163 "src/cobraparse.mly"
                     (Bind(_1,_3))
# 1141 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_simple_assignment) in
    Obj.repr(
# 164 "src/cobraparse.mly"
                        (_1)
# 1148 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 165 "src/cobraparse.mly"
                     (_2)
# 1155 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 166 "src/cobraparse.mly"
                                  ( Func_call (_1, _3)  )
# 1163 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 167 "src/cobraparse.mly"
                                               (Class_Method (_1, _3))
# 1172 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'all_dot_ops) in
    Obj.repr(
# 168 "src/cobraparse.mly"
              (_1)
# 1179 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_Dref) in
    Obj.repr(
# 169 "src/cobraparse.mly"
                  (Memory_manage (Deref, _2))
# 1186 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'all_new_op) in
    Obj.repr(
# 170 "src/cobraparse.mly"
                 (Memory_manage (New, _2))
# 1193 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "src/cobraparse.mly"
                  (Memory_manage (Address, _2))
# 1200 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "src/cobraparse.mly"
                    (Asn(Bind(_1,Dynamic),_3))
# 1208 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "src/cobraparse.mly"
                              (Asn(Bind(_1,_3),_5))
# 1217 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'all_Dref) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "src/cobraparse.mly"
                         (Asn_Dref(Memory_manage(Deref, _2),_4))
# 1225 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'typ_list) in
    Obj.repr(
# 176 "src/cobraparse.mly"
                             (Custom_types(_2,_4))
# 1233 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "src/cobraparse.mly"
                                               (Array_assign(_1,_2,_4,_7))
# 1243 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "src/cobraparse.mly"
              (Memory_manage (Retain, _2))
# 1250 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 180 "src/cobraparse.mly"
            (Float_literal (_1))
# 1257 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'array_element) in
    Obj.repr(
# 181 "src/cobraparse.mly"
                              ( Array(_2) )
# 1264 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 182 "src/cobraparse.mly"
       (Bool _1)
# 1271 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 183 "src/cobraparse.mly"
          (Literal(_1))
# 1278 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 184 "src/cobraparse.mly"
              ( Stirng_literal (_1))
# 1285 "src/cobraparse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 190 "src/cobraparse.mly"
               ( Binop(_1, Eq, _3) )
# 1293 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "src/cobraparse.mly"
                ( Binop(_1, Neq, _3) )
# 1301 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 192 "src/cobraparse.mly"
              ( Binop(_1, Less, _3) )
# 1309 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "src/cobraparse.mly"
               ( Binop(_1, Greater, _3) )
# 1317 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 194 "src/cobraparse.mly"
                ( Binop(_1, Leq, _3) )
# 1325 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "src/cobraparse.mly"
                ( Binop(_1, Geq, _3) )
# 1333 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 196 "src/cobraparse.mly"
                ( Binop(_1, And, _3) )
# 1341 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "src/cobraparse.mly"
               ( Binop(_1, Or, _3) )
# 1349 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 198 "src/cobraparse.mly"
                 ( Binop(_1, Add, _3) )
# 1357 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "src/cobraparse.mly"
                  ( Binop(_1, Sub, _3) )
# 1365 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 200 "src/cobraparse.mly"
                  ( Binop(_1, Mul, _3) )
# 1373 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "src/cobraparse.mly"
                   ( Binop(_1, Div, _3) )
# 1381 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 202 "src/cobraparse.mly"
                ( Binop(_1, Exp, _3) )
# 1389 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "src/cobraparse.mly"
                     ( Binop(_1, Mod, _3) )
# 1397 "src/cobraparse.ml"
               : 'all_simple_assignment))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "src/cobraparse.mly"
([])
# 1403 "src/cobraparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 212 "src/cobraparse.mly"
       ( _1 )
# 1410 "src/cobraparse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 215 "src/cobraparse.mly"
      ( [_1] )
# 1417 "src/cobraparse.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 216 "src/cobraparse.mly"
                    ( _1::_3 )
# 1425 "src/cobraparse.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.stmt)
