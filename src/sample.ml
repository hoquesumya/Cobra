type token =
  | EOL
  | TAB
  | Colon
  | IF
  | ELSE
  | ELIF
  | NONELSE
  | NOT
  | AND
  | OR
  | PLUS
  | MINUS
  | DIVIDE
  | TIMES
  | EQ
  | MODULUS
  | NEQ
  | LT
  | RT
  | LTEQ
  | RTEQ
  | EXP
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | LPAREN
  | RPAREN
  | ASSIGN
  | COMMA
  | BREAK
  | CONTINUE
  | CLASS
  | PUBLIC
  | PRIVATE
  | STATIC
  | INT
  | BOOL
  | STRING
  | FLOAT
  | REF
  | TYPE
  | FOR
  | WHILE
  | DEF
  | RETURN
  | NULL
  | Nan
  | IMPORT
  | NEW
  | DELETE
  | FREE
  | TRY
  | CATCH
  | RVAL
  | EXCEPT
  | VIRTUAL
  | IN
  | RANGE
  | DOT
  | DEREF
  | String_Lit of (
# 10 "sample.mly"
        string
# 71 "sample.ml"
)
  | Variable of (
# 11 "sample.mly"
        string
# 76 "sample.ml"
)
  | Literal of (
# 12 "sample.mly"
        int
# 81 "sample.ml"
)
  | Float_Lit of (
# 13 "sample.mly"
        float
# 86 "sample.ml"
)
  | BLIT of (
# 14 "sample.mly"
        bool
# 91 "sample.ml"
)
  | INDENT
  | DEDENT
  | EOF
  | TUPLE
  | LIST
  | VARTUAL

open Parsing
let _ = parse_error;;
# 2 "sample.mly"
    open Ast
# 104 "sample.ml"
let yytransl_const = [|
  257 (* EOL *);
  258 (* TAB *);
  259 (* Colon *);
  260 (* IF *);
  261 (* ELSE *);
  262 (* ELIF *);
  263 (* NONELSE *);
  264 (* NOT *);
  265 (* AND *);
  266 (* OR *);
  267 (* PLUS *);
  268 (* MINUS *);
  269 (* DIVIDE *);
  270 (* TIMES *);
  271 (* EQ *);
  272 (* MODULUS *);
  273 (* NEQ *);
  274 (* LT *);
  275 (* RT *);
  276 (* LTEQ *);
  277 (* RTEQ *);
  278 (* EXP *);
  279 (* PLUSEQ *);
  280 (* MINUSEQ *);
  281 (* TIMESEQ *);
  282 (* DIVIDEEQ *);
  283 (* LBRACE *);
  284 (* RBRACE *);
  285 (* LBRACK *);
  286 (* RBRACK *);
  287 (* LPAREN *);
  288 (* RPAREN *);
  289 (* ASSIGN *);
  290 (* COMMA *);
  291 (* BREAK *);
  292 (* CONTINUE *);
  293 (* CLASS *);
  294 (* PUBLIC *);
  295 (* PRIVATE *);
  296 (* STATIC *);
  297 (* INT *);
  298 (* BOOL *);
  299 (* STRING *);
  300 (* FLOAT *);
  301 (* REF *);
  302 (* TYPE *);
  303 (* FOR *);
  304 (* WHILE *);
  305 (* DEF *);
  306 (* RETURN *);
  307 (* NULL *);
  308 (* Nan *);
  309 (* IMPORT *);
  310 (* NEW *);
  311 (* DELETE *);
  312 (* FREE *);
  313 (* TRY *);
  314 (* CATCH *);
  315 (* RVAL *);
  316 (* EXCEPT *);
  317 (* VIRTUAL *);
  318 (* IN *);
  319 (* RANGE *);
  320 (* DOT *);
  321 (* DEREF *);
  327 (* INDENT *);
  328 (* DEDENT *);
    0 (* EOF *);
  329 (* TUPLE *);
  330 (* LIST *);
  331 (* VARTUAL *);
    0|]

let yytransl_block = [|
  322 (* String_Lit *);
  323 (* Variable *);
  324 (* Literal *);
  325 (* Float_Lit *);
  326 (* BLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\007\000\007\000\007\000\007\000\007\000\007\000\
\008\000\008\000\009\000\009\000\010\000\010\000\005\000\005\000\
\011\000\011\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\003\000\008\000\010\000\003\000\008\000\
\005\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\000\000\001\000\001\000\003\000\000\000\002\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\004\000\006\000\
\003\000\003\000\003\000\006\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\027\000\029\000\030\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
\007\000\000\000\011\000\012\000\013\000\014\000\015\000\016\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\009\000\000\000\000\000\000\000\026\000\
\000\000\000\000\010\000\000\000\048\000\000\000\000\000\000\000\
\008\000\005\000\000\000\000\000\006\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\021\000\086\000\100\000\065\000\020\000\
\022\000\023\000\088\000"

let yysindex = "\003\000\
\212\001\000\000\022\255\022\255\194\254\217\254\022\255\022\255\
\010\255\022\255\000\000\045\255\000\000\000\000\000\000\000\000\
\054\000\212\001\092\255\024\255\153\255\032\255\000\000\036\255\
\039\255\042\255\115\255\222\255\015\255\254\254\076\255\000\000\
\000\000\022\255\022\255\022\255\022\255\022\255\022\255\022\255\
\022\255\022\255\022\255\022\255\022\255\022\255\022\255\022\255\
\018\255\022\255\022\255\022\255\044\255\000\000\019\255\019\255\
\000\000\096\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\184\255\206\004\150\003\050\255\050\255\038\255\038\255\
\218\004\218\004\196\255\196\255\196\255\254\254\001\255\063\255\
\077\255\196\255\184\255\000\000\022\255\079\255\081\255\019\255\
\090\255\060\255\101\255\000\000\022\255\184\255\135\255\019\255\
\000\000\000\255\212\001\000\000\022\255\107\255\139\255\000\000\
\141\255\076\255\000\000\184\255\000\000\060\255\060\255\140\255\
\000\000\000\000\144\255\060\255\000\000"

let yyrindex = "\000\000\
\147\000\000\000\118\255\119\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\147\000\000\000\071\000\064\255\000\000\000\000\000\000\
\000\000\000\000\000\000\045\004\000\000\211\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\119\255\
\000\000\000\000\000\000\000\000\141\000\000\000\120\255\120\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\000\231\003\022\004\235\001\049\002\095\001\165\001\
\143\003\205\003\119\002\189\002\003\003\025\001\000\000\000\000\
\000\000\073\003\092\004\000\000\000\000\000\000\244\254\120\255\
\000\000\000\000\000\000\000\000\119\255\102\004\000\000\000\000\
\000\000\000\000\147\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\146\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\240\255\000\000\255\255\224\255\220\255\047\000\226\255\
\004\000\102\000\059\000"

let yytablesize = 1575
let yytable = "\019\000\
\017\000\033\000\105\000\001\000\025\000\027\000\028\000\024\000\
\030\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\019\000\042\000\043\000\025\000\044\000\045\000\046\000\089\000\
\087\000\087\000\047\000\026\000\048\000\047\000\091\000\048\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\029\000\031\000\
\082\000\083\000\003\000\080\000\004\000\032\000\025\000\097\000\
\051\000\087\000\106\000\046\000\004\000\053\000\039\000\040\000\
\049\000\087\000\047\000\054\000\048\000\055\000\031\000\046\000\
\056\000\113\000\114\000\008\000\085\000\050\000\047\000\117\000\
\048\000\058\000\107\000\094\000\081\000\012\000\010\000\011\000\
\012\000\013\000\014\000\015\000\034\000\021\000\092\000\021\000\
\102\000\019\000\090\000\108\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\093\000\042\000\043\000\095\000\044\000\
\045\000\046\000\096\000\057\000\059\000\060\000\061\000\062\000\
\047\000\098\000\048\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\099\000\042\000\043\000\101\000\044\000\045\000\
\046\000\103\000\109\000\110\000\049\000\111\000\115\000\047\000\
\116\000\048\000\002\000\019\000\063\000\064\000\019\000\023\000\
\112\000\084\000\104\000\049\000\000\000\000\000\000\000\000\000\
\000\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\050\000\042\000\043\000\000\000\044\000\045\000\046\000\000\000\
\000\000\000\000\049\000\000\000\000\000\047\000\000\000\048\000\
\000\000\000\000\052\000\000\000\000\000\000\000\000\000\050\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\
\042\000\043\000\000\000\044\000\045\000\046\000\037\000\038\000\
\039\000\040\000\045\000\000\000\047\000\000\000\048\000\000\000\
\049\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\047\000\000\000\048\000\000\000\000\000\050\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\042\000\043\000\
\000\000\044\000\045\000\046\000\000\000\000\000\000\000\049\000\
\000\000\000\000\047\000\000\000\048\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\017\000\000\000\017\000\017\000\017\000\000\000\
\040\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\
\017\000\017\000\017\000\000\000\000\000\017\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\017\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\031\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\000\000\031\000\
\031\000\000\000\031\000\031\000\031\000\000\000\039\000\000\000\
\000\000\004\000\000\000\031\000\031\000\031\000\031\000\000\000\
\031\000\000\000\000\000\031\000\000\000\004\000\004\000\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\031\000\
\031\000\004\000\000\000\000\000\031\000\004\000\004\000\004\000\
\004\000\004\000\004\000\031\000\000\000\000\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\049\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\000\000\049\000\049\000\000\000\
\049\000\049\000\049\000\000\000\038\000\000\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\000\000\049\000\000\000\
\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\049\000\000\000\
\000\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\045\000\000\000\000\000\000\000\000\000\
\000\000\049\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\045\000\045\000\000\000\045\000\045\000\
\045\000\000\000\036\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\045\000\000\000\045\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\045\000\045\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\040\000\000\000\000\000\000\000\000\000\000\000\045\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\000\000\040\000\040\000\000\000\040\000\040\000\040\000\000\000\
\037\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\040\000\000\000\040\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\040\000\000\000\000\000\000\000\040\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\039\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\
\039\000\000\000\039\000\039\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\039\000\000\000\039\000\000\000\
\039\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\039\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\038\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\000\000\038\000\038\000\000\000\
\038\000\038\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\000\000\038\000\000\000\038\000\000\000\038\000\000\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\036\000\000\000\000\000\000\000\000\000\
\003\000\038\000\004\000\036\000\036\000\036\000\036\000\000\000\
\005\000\036\000\000\000\036\000\036\000\000\000\036\000\036\000\
\000\000\000\000\042\000\000\000\006\000\007\000\000\000\000\000\
\036\000\008\000\036\000\000\000\036\000\000\000\000\000\036\000\
\009\000\000\000\000\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000\036\000\036\000\000\000\000\000\000\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\037\000\000\000\000\000\000\000\000\000\000\000\036\000\
\000\000\037\000\037\000\037\000\037\000\000\000\000\000\037\000\
\000\000\037\000\037\000\000\000\037\000\037\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\
\037\000\000\000\037\000\000\000\000\000\037\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\037\000\037\000\000\000\000\000\000\000\037\000\000\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\034\000\
\000\000\000\000\000\000\000\000\000\000\037\000\000\000\034\000\
\034\000\000\000\000\000\000\000\000\000\034\000\000\000\034\000\
\034\000\000\000\034\000\034\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\034\000\000\000\
\034\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\034\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\041\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\041\000\041\000\000\000\
\000\000\000\000\000\000\041\000\033\000\041\000\041\000\000\000\
\041\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\000\000\041\000\000\000\041\000\000\000\
\000\000\041\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\041\000\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\042\000\000\000\000\000\000\000\000\000\
\000\000\041\000\000\000\042\000\042\000\000\000\000\000\000\000\
\000\000\042\000\000\000\042\000\042\000\043\000\042\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\000\000\042\000\000\000\042\000\000\000\000\000\042\000\
\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\000\042\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\035\000\000\000\000\000\000\000\000\000\000\000\042\000\
\000\000\035\000\035\000\000\000\000\000\000\000\000\000\035\000\
\000\000\035\000\035\000\051\000\035\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\000\035\000\000\000\
\035\000\000\000\035\000\000\000\000\000\035\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\000\035\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\032\000\
\000\000\052\000\000\000\000\000\000\000\035\000\000\000\032\000\
\032\000\000\000\000\000\000\000\000\000\032\000\035\000\032\000\
\037\000\038\000\039\000\040\000\041\000\000\000\042\000\043\000\
\000\000\044\000\045\000\046\000\032\000\000\000\032\000\000\000\
\032\000\000\000\047\000\032\000\048\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\
\032\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\033\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\033\000\033\000\000\000\
\000\000\000\000\000\000\033\000\000\000\033\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\044\000\
\000\000\000\000\033\000\000\000\033\000\000\000\033\000\044\000\
\044\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\033\000\000\000\
\000\000\000\000\033\000\000\000\044\000\000\000\044\000\000\000\
\044\000\033\000\000\000\044\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\000\000\000\000\000\000\043\000\044\000\
\044\000\000\000\000\000\000\000\044\000\000\000\000\000\043\000\
\000\000\000\000\000\000\044\000\000\000\000\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\046\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\043\000\000\000\043\000\
\000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\
\000\000\000\000\046\000\043\000\046\000\000\000\046\000\000\000\
\000\000\046\000\043\000\000\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\051\000\046\000\046\000\000\000\
\000\000\000\000\046\000\000\000\000\000\000\000\053\000\000\000\
\000\000\046\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\000\000\051\000\000\000\051\000\000\000\000\000\
\051\000\000\000\000\000\053\000\000\000\053\000\000\000\053\000\
\000\000\000\000\053\000\000\000\051\000\051\000\000\000\000\000\
\000\000\051\000\052\000\000\000\000\000\000\000\053\000\053\000\
\051\000\000\000\000\000\053\000\051\000\051\000\051\000\051\000\
\051\000\051\000\053\000\000\000\000\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\052\000\
\000\000\052\000\000\000\052\000\000\000\000\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\052\000\052\000\000\000\000\000\000\000\052\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\037\000\038\000\039\000\040\000\041\000\000\000\042\000\043\000\
\000\000\044\000\045\000\046\000\037\000\038\000\039\000\040\000\
\000\000\000\000\047\000\043\000\048\000\044\000\045\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000"

let yycheck = "\001\000\
\000\000\018\000\003\001\001\000\067\001\007\000\008\000\004\000\
\010\000\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\018\000\017\001\018\001\032\001\020\001\021\001\022\001\056\000\
\055\000\056\000\029\001\067\001\031\001\029\001\030\001\031\001\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\037\001\003\001\
\050\000\051\000\029\001\048\000\031\001\000\000\067\001\088\000\
\033\001\088\000\059\001\022\001\000\000\030\001\013\001\014\001\
\064\001\096\000\029\001\032\001\031\001\031\001\000\000\022\001\
\031\001\110\000\111\000\054\001\033\001\077\001\029\001\116\000\
\031\001\067\001\099\000\085\000\067\001\067\001\065\001\066\001\
\067\001\068\001\069\001\070\001\001\001\030\001\032\001\032\001\
\093\000\099\000\003\001\101\000\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\031\001\017\001\018\001\032\001\020\001\
\021\001\022\001\034\001\001\001\041\001\042\001\043\001\044\001\
\029\001\032\001\031\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\071\001\017\001\018\001\033\001\020\001\021\001\
\022\001\003\001\032\001\001\001\000\000\001\001\003\001\029\001\
\001\001\031\001\000\000\030\001\073\001\074\001\032\001\032\001\
\106\000\052\000\096\000\064\001\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\077\001\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\255\255\255\255\064\001\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\077\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\255\255\
\017\001\018\001\255\255\020\001\021\001\022\001\011\001\012\001\
\013\001\014\001\000\000\255\255\029\001\255\255\031\001\255\255\
\064\001\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\031\001\255\255\255\255\077\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\021\001\022\001\255\255\255\255\255\255\064\001\
\255\255\255\255\029\001\255\255\031\001\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\077\001\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\000\000\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\001\001\
\255\255\255\255\255\255\255\255\255\255\077\001\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\020\001\021\001\022\001\255\255\000\000\255\255\
\255\255\037\001\255\255\029\001\030\001\031\001\032\001\255\255\
\034\001\255\255\255\255\037\001\255\255\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\255\255\255\255\255\255\049\001\
\050\001\061\001\255\255\255\255\054\001\065\001\066\001\067\001\
\068\001\069\001\070\001\061\001\255\255\255\255\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\001\001\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\021\001\022\001\255\255\000\000\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\255\255\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\001\001\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\255\255\017\001\018\001\255\255\020\001\021\001\
\022\001\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\255\255\034\001\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\255\255\255\255\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\001\001\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\021\001\022\001\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\001\001\
\255\255\255\255\255\255\255\255\255\255\077\001\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\255\255\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\034\001\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\255\255\255\255\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\001\001\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\001\001\255\255\255\255\255\255\255\255\
\029\001\077\001\031\001\009\001\010\001\011\001\012\001\255\255\
\037\001\015\001\255\255\017\001\018\001\255\255\020\001\021\001\
\255\255\255\255\000\000\255\255\049\001\050\001\255\255\255\255\
\030\001\054\001\032\001\255\255\034\001\255\255\255\255\037\001\
\061\001\255\255\255\255\255\255\065\001\066\001\067\001\068\001\
\069\001\070\001\255\255\049\001\050\001\255\255\255\255\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\001\001\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\015\001\
\255\255\017\001\018\001\255\255\020\001\021\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\030\001\255\255\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\001\001\
\255\255\255\255\255\255\255\255\255\255\077\001\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\255\255\017\001\
\018\001\255\255\020\001\021\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\030\001\255\255\032\001\255\255\
\034\001\255\255\255\255\037\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\255\255\255\255\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\001\001\255\255\255\255\
\255\255\255\255\255\255\077\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\000\000\017\001\018\001\255\255\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\255\255\032\001\255\255\034\001\255\255\
\255\255\037\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\001\001\255\255\255\255\255\255\255\255\
\255\255\077\001\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\015\001\255\255\017\001\018\001\000\000\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\255\255\034\001\255\255\255\255\037\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\255\255\255\255\255\255\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\064\001\065\001\066\001\067\001\068\001\069\001\
\070\001\001\001\255\255\255\255\255\255\255\255\255\255\077\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\015\001\
\255\255\017\001\018\001\000\000\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\030\001\255\255\
\032\001\255\255\034\001\255\255\255\255\037\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\049\001\050\001\255\255\255\255\255\255\054\001\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\064\001\065\001\066\001\067\001\068\001\069\001\070\001\001\001\
\255\255\000\000\255\255\255\255\255\255\077\001\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\015\001\009\001\017\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\021\001\022\001\030\001\255\255\032\001\255\255\
\034\001\255\255\029\001\037\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\049\001\
\050\001\255\255\255\255\255\255\054\001\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\001\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\009\001\010\001\255\255\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\255\255\255\255\077\001\255\255\255\255\255\255\255\255\001\001\
\255\255\255\255\030\001\255\255\032\001\255\255\034\001\009\001\
\010\001\037\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\030\001\255\255\032\001\255\255\
\034\001\061\001\255\255\037\001\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\255\255\255\255\255\255\001\001\049\001\
\050\001\255\255\255\255\255\255\054\001\255\255\255\255\010\001\
\255\255\255\255\255\255\061\001\255\255\255\255\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\001\001\255\255\255\255\
\255\255\255\255\255\255\030\001\255\255\032\001\255\255\034\001\
\255\255\255\255\037\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\255\255\255\255\030\001\054\001\032\001\255\255\034\001\255\255\
\255\255\037\001\061\001\255\255\255\255\064\001\065\001\066\001\
\067\001\068\001\069\001\070\001\001\001\049\001\050\001\255\255\
\255\255\255\255\054\001\255\255\255\255\255\255\001\001\255\255\
\255\255\061\001\255\255\255\255\064\001\065\001\066\001\067\001\
\068\001\069\001\070\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\255\255\034\001\255\255\255\255\
\037\001\255\255\255\255\030\001\255\255\032\001\255\255\034\001\
\255\255\255\255\037\001\255\255\049\001\050\001\255\255\255\255\
\255\255\054\001\001\001\255\255\255\255\255\255\049\001\050\001\
\061\001\255\255\255\255\054\001\065\001\066\001\067\001\068\001\
\069\001\070\001\061\001\255\255\255\255\255\255\065\001\066\001\
\067\001\068\001\069\001\070\001\255\255\255\255\255\255\030\001\
\255\255\032\001\255\255\034\001\255\255\255\255\037\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\050\001\255\255\255\255\255\255\054\001\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\065\001\066\001\067\001\068\001\069\001\070\001\
\011\001\012\001\013\001\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\021\001\022\001\011\001\012\001\013\001\014\001\
\255\255\255\255\029\001\018\001\031\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\029\001\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\077\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\077\001"

let yynames_const = "\
  EOL\000\
  TAB\000\
  Colon\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  NONELSE\000\
  NOT\000\
  AND\000\
  OR\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  TIMES\000\
  EQ\000\
  MODULUS\000\
  NEQ\000\
  LT\000\
  RT\000\
  LTEQ\000\
  RTEQ\000\
  EXP\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  LPAREN\000\
  RPAREN\000\
  ASSIGN\000\
  COMMA\000\
  BREAK\000\
  CONTINUE\000\
  CLASS\000\
  PUBLIC\000\
  PRIVATE\000\
  STATIC\000\
  INT\000\
  BOOL\000\
  STRING\000\
  FLOAT\000\
  REF\000\
  TYPE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  RETURN\000\
  NULL\000\
  Nan\000\
  IMPORT\000\
  NEW\000\
  DELETE\000\
  FREE\000\
  TRY\000\
  CATCH\000\
  RVAL\000\
  EXCEPT\000\
  VIRTUAL\000\
  IN\000\
  RANGE\000\
  DOT\000\
  DEREF\000\
  INDENT\000\
  DEDENT\000\
  EOF\000\
  TUPLE\000\
  LIST\000\
  VARTUAL\000\
  "

let yynames_block = "\
  String_Lit\000\
  Variable\000\
  Literal\000\
  Float_Lit\000\
  BLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_rule_list) in
    Obj.repr(
# 44 "sample.mly"
                     ({body=_1})
# 752 "sample.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "sample.mly"
                           ([])
# 758 "sample.ml"
               : 'stmt_rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_rule) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_rule_list) in
    Obj.repr(
# 49 "sample.mly"
                           (_1 :: _2)
# 766 "sample.ml"
               : 'stmt_rule_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 52 "sample.mly"
                         (Expr (_1))
# 774 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'list_parameter_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement_block) in
    Obj.repr(
# 53 "sample.mly"
                                                                           (Function(Bind(_2,Dynamic),_4,_8))
# 783 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'list_parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'statement_block) in
    Obj.repr(
# 54 "sample.mly"
                                                                                     (Function(Bind(_2,_7),_4,_10))
# 793 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_rule) in
    Obj.repr(
# 55 "sample.mly"
                        (_2)
# 800 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'list_parameter_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement_block) in
    Obj.repr(
# 56 "sample.mly"
                                                                              (Class (_2,_4,_8))
# 809 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'statement_block) in
    Obj.repr(
# 57 "sample.mly"
                                                (Virtual_Class(_3,_5))
# 817 "sample.ml"
               : 'stmt_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_rule_list) in
    Obj.repr(
# 62 "sample.mly"
                          (Block (_2))
# 824 "sample.ml"
               : 'statement_block))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "sample.mly"
    (Int)
# 830 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "sample.mly"
       (Bool)
# 836 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "sample.mly"
         (String)
# 842 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "sample.mly"
        ( Float)
# 848 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "sample.mly"
        (Tuple)
# 854 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "sample.mly"
       (List)
# 860 "sample.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "sample.mly"
             (Bind(_1,Dynamic))
# 867 "sample.ml"
               : 'bind_var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 77 "sample.mly"
                        (Bind(_1,_3))
# 875 "sample.ml"
               : 'bind_var))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "sample.mly"
             ([])
# 881 "sample.ml"
               : 'list_argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_arg) in
    Obj.repr(
# 81 "sample.mly"
              (_1)
# 888 "sample.ml"
               : 'list_argument))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 83 "sample.mly"
             ([_1])
# 895 "sample.ml"
               : 'list_of_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_of_arg) in
    Obj.repr(
# 84 "sample.mly"
                              (_1::_3)
# 903 "sample.ml"
               : 'list_of_arg))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "sample.mly"
                ([])
# 909 "sample.ml"
               : 'list_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'list_arg) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'list_parameter_list) in
    Obj.repr(
# 90 "sample.mly"
                                  (_1::_2)
# 917 "sample.ml"
               : 'list_parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 92 "sample.mly"
            ([_1])
# 924 "sample.ml"
               : 'list_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_arg) in
    Obj.repr(
# 93 "sample.mly"
                             (_1 :: _3)
# 932 "sample.ml"
               : 'list_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 97 "sample.mly"
            (Literal(_1))
# 939 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 98 "sample.mly"
                  ( Stirng_literal (_1))
# 946 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 99 "sample.mly"
                (Float_literal (_1))
# 953 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 100 "sample.mly"
           (Bool _1)
# 960 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind_var) in
    Obj.repr(
# 101 "sample.mly"
               (_1)
# 967 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 103 "sample.mly"
                             (Binop (_1,Eq,_3))
# 975 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 104 "sample.mly"
                              ( Binop (_1, NEq, _3))
# 983 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 105 "sample.mly"
                              ( Binop (_1, Lt, _3))
# 991 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 106 "sample.mly"
                             ( Binop (_1, Gt, _3))
# 999 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 107 "sample.mly"
                               ( Binop (_1, Plus, _3))
# 1007 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 108 "sample.mly"
                                ( Binop (_1, Minus, _3))
# 1015 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 109 "sample.mly"
                                ( Binop (_1, Times, _3))
# 1023 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 110 "sample.mly"
                                 ( Binop (_1, Divde, _3))
# 1031 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 111 "sample.mly"
                              ( Binop (_1, Exp, _3))
# 1039 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 112 "sample.mly"
                               ( Binop (_1, Lteq, _3))
# 1047 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 113 "sample.mly"
                               ( Binop (_1, Rteq, _3))
# 1055 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 114 "sample.mly"
                               (Binop (_1, Or, _3))
# 1063 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 115 "sample.mly"
                               (Binop (_1, And, _3))
# 1071 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 117 "sample.mly"
                      (Memory_manage (Deref, _2))
# 1078 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 118 "sample.mly"
                    (Memory_manage (New, _2))
# 1085 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'list_argument) in
    Obj.repr(
# 120 "sample.mly"
                                            (Func_call(_1,_3))
# 1093 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'list_argument) in
    Obj.repr(
# 121 "sample.mly"
                                                         (Class_Method (_1, _3, _5))
# 1102 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_argument) in
    Obj.repr(
# 122 "sample.mly"
                                    (List(_2))
# 1109 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_argument) in
    Obj.repr(
# 123 "sample.mly"
                                  (List(_2))
# 1116 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind_var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 127 "sample.mly"
                                (Assign(_1,_3))
# 1124 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr_rule) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr_rule) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 128 "sample.mly"
                                                         ( ListAccess(_1, _3) )
# 1133 "sample.ml"
               : 'expr_rule))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'list_argument) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expr_rule) in
    Obj.repr(
# 129 "sample.mly"
                                                   (ListAccess(_2,_5))
# 1141 "sample.ml"
               : 'expr_rule))
(* Entry program_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
