type token =
  | LITERAL of (
# 5 "parser.mly"
        int
# 6 "parser.ml"
)
  | BLIT of (
# 6 "parser.mly"
        bool
# 11 "parser.ml"
)
  | ID of (
# 7 "parser.mly"
        string
# 16 "parser.ml"
)
  | LPAREN
  | RPAREN
  | COLON
  | COMMA
  | DEF
  | ENDEF
  | ELSE
  | IF
  | ENDIF
  | WHILE
  | NEXT
  | RETURN
  | INT
  | BOOL
  | PLUS
  | MINUS
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | GT
  | LTE
  | GTE
  | EOF
  | BREAK
  | CONTINUE
  | DEREF
  | POINTER
  | MUL
  | ADDRESS_OF
  | RETAIN

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
open Ast
# 54 "parser.ml"
let yytransl_const = [|
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* COLON *);
  263 (* COMMA *);
  264 (* DEF *);
  265 (* ENDEF *);
  266 (* ELSE *);
  267 (* IF *);
  268 (* ENDIF *);
  269 (* WHILE *);
  270 (* NEXT *);
  271 (* RETURN *);
  272 (* INT *);
  273 (* BOOL *);
  274 (* PLUS *);
  275 (* MINUS *);
  276 (* ASSIGN *);
  277 (* EQ *);
  278 (* NEQ *);
  279 (* LT *);
  280 (* GT *);
  281 (* LTE *);
  282 (* GTE *);
    0 (* EOF *);
  283 (* BREAK *);
  284 (* CONTINUE *);
  285 (* DEREF *);
  286 (* POINTER *);
  287 (* MUL *);
  288 (* ADDRESS_OF *);
  289 (* RETAIN *);
    0|]

let yytransl_block = [|
  257 (* LITERAL *);
  258 (* BLIT *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\005\000\005\000\007\000\007\000\008\000\
\008\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\009\000\009\000\010\000\
\010\000\004\000\004\000\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\008\000\008\000\005\000\005\000\002\000\
\001\000\001\000\001\000\001\000\002\000\001\000\001\000\001\000\
\002\000\001\000\001\000\001\000\003\000\003\000\003\000\004\000\
\004\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\004\000\003\000\002\000\002\000\002\000\000\000\001\000\001\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\018\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\015\000\014\000\010\000\011\000\000\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\035\000\036\000\037\000\
\001\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\039\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\017\000\000\000\000\000\033\000\000\000\000\000\043\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\013\000\
\000\000\006\000\007\000\045\000\000\000\000\000\000\000\000\000\
\004\000\005\000"

let yydgoto = "\002\000\
\018\000\019\000\072\000\070\000\073\000\021\000\022\000\046\000\
\048\000\049\000\071\000"

let yysindex = "\005\000\
\045\255\000\000\000\000\000\000\003\255\078\255\006\255\078\255\
\078\255\078\255\000\000\000\000\000\000\000\000\078\255\078\255\
\078\255\000\000\013\000\045\255\138\255\253\254\078\255\078\255\
\065\255\016\255\095\255\106\255\138\255\000\000\000\000\000\000\
\000\000\000\000\078\255\078\255\078\255\078\255\078\255\078\255\
\078\255\078\255\078\255\000\000\018\255\010\255\127\255\027\255\
\000\000\138\255\000\000\047\255\045\255\045\255\078\255\020\255\
\020\255\149\255\149\255\240\254\240\254\240\254\240\254\000\000\
\000\000\078\255\078\255\000\000\048\255\049\255\000\000\045\255\
\004\255\038\255\138\255\138\255\000\000\047\255\053\255\000\000\
\057\255\000\000\000\000\000\000\045\255\045\255\055\255\054\255\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\163\001\000\000\066\255\000\000\
\000\000\000\000\000\000\000\000\196\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\255\000\000\
\000\000\064\001\000\000\071\255\000\000\000\000\000\000\001\000\
\034\000\232\000\031\001\100\000\133\000\166\000\199\000\000\000\
\000\000\000\000\000\000\000\000\080\255\000\000\000\000\019\255\
\000\000\000\000\097\001\130\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\072\000\004\000\000\000\206\255\002\000\000\000\000\000\
\000\000\026\000\019\000"

let yytablesize = 741
let yytable = "\044\000\
\021\000\035\000\036\000\074\000\020\000\001\000\023\000\025\000\
\026\000\027\000\028\000\029\000\033\000\081\000\043\000\082\000\
\030\000\031\000\032\000\052\000\065\000\080\000\024\000\020\000\
\047\000\050\000\045\000\012\000\012\000\066\000\012\000\068\000\
\012\000\022\000\087\000\088\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\003\000\004\000\005\000\
\006\000\069\000\043\000\083\000\007\000\079\000\078\000\008\000\
\075\000\009\000\085\000\010\000\011\000\012\000\086\000\089\000\
\002\000\090\000\020\000\076\000\047\000\051\000\038\000\013\000\
\014\000\015\000\040\000\042\000\016\000\017\000\003\000\004\000\
\005\000\006\000\035\000\036\000\044\000\037\000\038\000\039\000\
\040\000\041\000\042\000\034\000\077\000\011\000\012\000\043\000\
\084\000\000\000\000\000\029\000\053\000\000\000\000\000\000\000\
\000\000\000\000\015\000\000\000\000\000\016\000\017\000\054\000\
\035\000\036\000\000\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\035\000\036\000\043\000\037\000\038\000\
\039\000\040\000\041\000\042\000\030\000\067\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\036\000\000\000\037\000\038\000\039\000\040\000\041\000\
\042\000\000\000\000\000\035\000\036\000\043\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\031\000\035\000\036\000\
\043\000\000\000\000\000\039\000\040\000\041\000\042\000\000\000\
\000\000\000\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\021\000\027\000\000\000\
\021\000\021\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\023\000\
\000\000\022\000\022\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\025\000\020\000\020\000\020\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\024\000\000\000\029\000\029\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\009\000\000\000\030\000\030\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
\000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\008\000\000\000\031\000\031\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\000\000\032\000\032\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\000\000\000\000\026\000\026\000\026\000\000\000\000\000\
\000\000\000\000\026\000\026\000\026\000\000\000\000\000\026\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\000\000\027\000\027\000\027\000\000\000\000\000\000\000\
\000\000\027\000\027\000\027\000\000\000\000\000\027\000\027\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\000\000\000\000\023\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\000\000\000\000\023\000\
\023\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\024\000\024\000\024\000\000\000\
\000\000\024\000\024\000\009\000\009\000\009\000\009\000\000\000\
\000\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\009\000\009\000\
\000\000\000\000\009\000\009\000\008\000\008\000\008\000\008\000\
\000\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\008\000\
\008\000\000\000\000\000\008\000\008\000"

let yycheck = "\003\001\
\000\000\018\001\019\001\054\000\001\000\001\000\004\001\006\000\
\003\001\008\000\009\000\010\000\000\000\010\001\031\001\012\001\
\015\000\016\000\017\000\004\001\003\001\072\000\020\001\020\000\
\023\000\024\000\030\001\009\001\010\001\020\001\012\001\005\001\
\014\001\000\000\085\000\086\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\001\001\002\001\003\001\
\004\001\003\001\031\001\014\001\008\001\005\001\007\001\011\001\
\055\000\013\001\006\001\015\001\016\001\017\001\006\001\009\001\
\000\000\012\001\000\000\066\000\067\000\005\001\005\001\027\001\
\028\001\029\001\005\001\005\001\032\001\033\001\001\001\002\001\
\003\001\004\001\018\001\019\001\005\001\021\001\022\001\023\001\
\024\001\025\001\026\001\020\000\067\000\016\001\017\001\031\001\
\078\000\255\255\255\255\000\000\006\001\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\032\001\033\001\006\001\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\018\001\019\001\031\001\021\001\022\001\
\023\001\024\001\025\001\026\001\000\000\007\001\255\255\255\255\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\018\001\019\001\031\001\021\001\022\001\
\023\001\024\001\025\001\026\001\255\255\000\000\018\001\019\001\
\031\001\255\255\255\255\023\001\024\001\025\001\026\001\255\255\
\255\255\255\255\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\000\000\255\255\
\032\001\033\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\000\000\
\255\255\032\001\033\001\001\001\002\001\003\001\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\000\000\031\001\032\001\033\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\000\000\255\255\032\001\033\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\000\000\255\255\032\001\033\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\000\000\255\255\032\001\033\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\027\001\028\001\029\001\255\255\255\255\032\001\033\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\255\255\255\255\032\001\
\033\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\255\255\255\255\255\255\
\255\255\255\255\255\255\027\001\028\001\029\001\255\255\255\255\
\032\001\033\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\029\001\255\255\
\255\255\032\001\033\001\001\001\002\001\003\001\004\001\255\255\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\255\255\255\255\032\001\033\001\001\001\002\001\003\001\004\001\
\255\255\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\255\255\255\255\032\001\033\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  COLON\000\
  COMMA\000\
  DEF\000\
  ENDEF\000\
  ELSE\000\
  IF\000\
  ENDIF\000\
  WHILE\000\
  NEXT\000\
  RETURN\000\
  INT\000\
  BOOL\000\
  PLUS\000\
  MINUS\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LTE\000\
  GTE\000\
  EOF\000\
  BREAK\000\
  CONTINUE\000\
  DEREF\000\
  POINTER\000\
  MUL\000\
  ADDRESS_OF\000\
  RETAIN\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statements) in
    Obj.repr(
# 29 "parser.mly"
                   ( { locals = []; body = _1 } )
# 399 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 32 "parser.mly"
              ( [_1] )
# 406 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statements) in
    Obj.repr(
# 33 "parser.mly"
                         ( _1 :: _2 )
# 414 "parser.ml"
               : 'statements))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'parameters) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 36 "parser.mly"
                                                               ( Function (_2, _4, _7) )
# 423 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'statement_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 37 "parser.mly"
                                                                 ( If (_2, _4, Some(_7)) )
# 432 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 38 "parser.mly"
                                       ( If (_2, _4, None) )
# 440 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 39 "parser.mly"
                                         ( While (_2, _4) )
# 448 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                ( Return _2 )
# 455 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
         ( Expr _1 )
# 462 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
          (Break)
# 468 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "parser.mly"
             (Continue)
# 474 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 47 "parser.mly"
              ( [_1] )
# 481 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 48 "parser.mly"
                             ( _1 :: _2 )
# 489 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
         (Bool)
# 495 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 52 "parser.mly"
        (Int)
# 501 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
    ( Id _1)
# 508 "parser.ml"
               : 'Id_catg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
              ( PointerID _2)
# 515 "parser.ml"
               : 'Id_catg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 58 "parser.mly"
            ( Literal _1 )
# 522 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 59 "parser.mly"
         ( BoolLit _1 )
# 529 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 60 "parser.mly"
       (Var _1)
# 536 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                   ( Binop (_1, Add, _3) )
# 544 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                    ( Binop (_1, Sub, _3) )
# 552 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                   ( Assign (_1, _3) )
# 560 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'Id_catg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                            (AssignVar (_1, _2,_4))
# 569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                           (AssignPointer (_2,_4))
# 577 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                 ( Binop (_1, Equal, _3) )
# 585 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                  ( Binop (_1, Neq, _3) )
# 593 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
                  (Binop (_1, Mul, _3))
# 601 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                 ( Binop (_1, Less, _3) )
# 609 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                 ( Binop (_1, Greater, _3) )
# 617 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                  ( Binop (_1, LessEq, _3) )
# 625 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 72 "parser.mly"
                  ( Binop (_1, GreaterEq, _3) )
# 633 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 73 "parser.mly"
                             ( Call(_1, _3) )
# 641 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                       (_2)
# 648 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
               (Memory_handler(Dref, _2))
# 655 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                    (Memory_handler (Address_of, _2))
# 662 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
                (Memory_handler (Retain, _2))
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
    ( [] )
# 675 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 81 "parser.mly"
         ( _1 )
# 682 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
         ( [_1] )
# 689 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 85 "parser.mly"
                   ( _1 :: _3 )
# 697 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
     ( [] )
# 703 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 89 "parser.mly"
                   ( _1 )
# 710 "parser.ml"
               : 'parameters))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 92 "parser.mly"
       ( [_1] )
# 717 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'parameter_list) in
    Obj.repr(
# 93 "parser.mly"
                            ( _1 :: _3 )
# 725 "parser.ml"
               : 'parameter_list))
(* Entry program_rule *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program_rule (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
