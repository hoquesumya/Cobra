type token =
  | NOELSE
  | ASN
  | EQ
  | NEQ
  | LT
  | GT
  | LEQ
  | GEQ
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSEQ
  | MINUSEQ
  | TIMESEQ
  | DIVIDEEQ
  | EXPEQ
  | EXP
  | AND
  | OR
  | ARROW
  | CONTINUE
  | BREAK
  | TAB
  | SPACE
  | COLON
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | COMMA
  | DEF
  | IN
  | RETURN
  | NONE
  | DOT
  | UNION
  | BOOL
  | INT
  | FLOAT
  | STRING
  | TUPLE
  | LIST
  | MODULUS
  | SEP
  | CLASS
  | IMPORT
  | RANGE
  | DELETE
  | TYPE
  | INDENT
  | DEDENT
  | NEW
  | DREF
  | PUBLIC
  | PRIVATE
  | ADDRESS_OF
  | LPAREN
  | RPAREN
  | SAME_INDENT
  | LBRACK
  | RBRACK
  | VIRTUAL
  | NULL
  | MAKEMANUAL
  | RELEASE
  | LBRACE
  | RBRACE
  | RETAIN
  | NOT
  | VARIABLE of (
# 15 "parser.mly"
        string
# 77 "parser.ml"
)
  | Float_Lit of (
# 18 "parser.mly"
        float
# 82 "parser.ml"
)
  | String_Lit of (
# 19 "parser.mly"
        string
# 87 "parser.ml"
)
  | Literal of (
# 20 "parser.mly"
        int
# 92 "parser.ml"
)
  | BLIT of (
# 21 "parser.mly"
        bool
# 97 "parser.ml"
)
  | EOF
  | EOL

open Parsing
let _ = parse_error;;
# 1 "parser.mly"
 
	open Ast
# 107 "parser.ml"
let yytransl_const = [|
  257 (* NOELSE *);
  258 (* ASN *);
  259 (* EQ *);
  260 (* NEQ *);
  261 (* LT *);
  262 (* GT *);
  263 (* LEQ *);
  264 (* GEQ *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* PLUSEQ *);
  270 (* MINUSEQ *);
  271 (* TIMESEQ *);
  272 (* DIVIDEEQ *);
  273 (* EXPEQ *);
  274 (* EXP *);
  275 (* AND *);
  276 (* OR *);
  277 (* ARROW *);
  278 (* CONTINUE *);
  279 (* BREAK *);
  280 (* TAB *);
  281 (* SPACE *);
  282 (* COLON *);
  283 (* IF *);
  284 (* ELSE *);
  285 (* ELIF *);
  286 (* FOR *);
  287 (* WHILE *);
  288 (* COMMA *);
  289 (* DEF *);
  290 (* IN *);
  291 (* RETURN *);
  292 (* NONE *);
  293 (* DOT *);
  294 (* UNION *);
  295 (* BOOL *);
  296 (* INT *);
  297 (* FLOAT *);
  298 (* STRING *);
  299 (* TUPLE *);
  300 (* LIST *);
  301 (* MODULUS *);
  302 (* SEP *);
  303 (* CLASS *);
  304 (* IMPORT *);
  305 (* RANGE *);
  306 (* DELETE *);
  307 (* TYPE *);
  308 (* INDENT *);
  309 (* DEDENT *);
  310 (* NEW *);
  311 (* DREF *);
  312 (* PUBLIC *);
  313 (* PRIVATE *);
  314 (* ADDRESS_OF *);
  315 (* LPAREN *);
  316 (* RPAREN *);
  317 (* SAME_INDENT *);
  318 (* LBRACK *);
  319 (* RBRACK *);
  320 (* VIRTUAL *);
  321 (* NULL *);
  322 (* MAKEMANUAL *);
  323 (* RELEASE *);
  324 (* LBRACE *);
  325 (* RBRACE *);
  326 (* RETAIN *);
  327 (* NOT *);
    0 (* EOF *);
  333 (* EOL *);
    0|]

let yytransl_block = [|
  328 (* VARIABLE *);
  329 (* Float_Lit *);
  330 (* String_Lit *);
  331 (* Literal *);
  332 (* BLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\005\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\005\000\009\000\005\000\003\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\011\000\013\000\010\000\
\012\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\008\000\000\000\000\000\006\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\013\000\054\000"

let yysindex = "\255\255\
\010\255\000\000\095\255\095\255\011\255\000\000\000\000\000\000\
\000\000\000\000\017\000\010\255\024\255\033\000\080\000\095\255\
\000\000\000\000\095\255\095\255\095\255\095\255\095\255\095\255\
\095\255\095\255\095\255\095\255\095\255\095\255\095\255\095\255\
\000\000\201\254\202\254\104\000\145\000\145\000\106\255\106\255\
\106\255\106\255\108\255\108\255\006\255\006\255\006\255\123\000\
\011\000\006\255\243\254\243\254\010\255\012\255\000\000\015\255\
\049\255\000\000\255\254\243\254\000\000"

let yyrindex = "\000\000\
\078\000\000\000\000\000\000\000\000\255\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\246\254\084\255\169\255\054\255\140\255\
\237\255\005\000\205\255\229\255\044\255\087\255\130\255\251\254\
\045\255\173\255\000\000\000\000\026\255\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\013\000\000\000\155\001\242\255"

let yytablesize = 446
let yytable = "\001\000\
\005\000\002\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\016\000\021\000\021\000\014\000\
\017\000\009\000\009\000\009\000\021\000\051\000\052\000\029\000\
\018\000\009\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\003\000\055\000\053\000\057\000\
\004\000\029\000\030\000\031\000\009\000\061\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\017\000\017\000\017\000\017\000\017\000\017\000\025\000\025\000\
\022\000\056\000\014\000\058\000\032\000\025\000\022\000\021\000\
\017\000\017\000\059\000\060\000\009\000\002\000\002\000\017\000\
\000\000\005\000\006\000\007\000\008\000\009\000\015\000\015\000\
\025\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\000\000\033\000\000\000\015\000\015\000\
\000\000\026\000\026\000\000\000\000\000\015\000\000\000\000\000\
\026\000\000\000\025\000\026\000\027\000\028\000\027\000\028\000\
\025\000\022\000\000\000\029\000\000\000\029\000\000\000\000\000\
\000\000\000\000\017\000\026\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\018\000\018\000\
\018\000\018\000\018\000\018\000\027\000\027\000\032\000\000\000\
\032\000\000\000\000\000\027\000\000\000\000\000\018\000\018\000\
\015\000\000\000\000\000\026\000\000\000\018\000\005\000\006\000\
\007\000\008\000\009\000\016\000\016\000\000\000\027\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\000\000\000\000\016\000\016\000\000\000\000\000\028\000\
\028\000\000\000\016\000\000\000\000\000\000\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\018\000\028\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\000\000\000\000\000\000\000\000\000\000\023\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\019\000\
\019\000\019\000\019\000\019\000\019\000\016\000\000\000\024\000\
\024\000\028\000\000\000\000\000\000\000\000\000\024\000\019\000\
\019\000\000\000\000\000\000\000\000\000\000\000\019\000\020\000\
\020\000\020\000\020\000\020\000\020\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\020\000\
\020\000\023\000\000\000\005\000\029\000\030\000\020\000\005\000\
\000\000\000\000\000\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\000\000\000\000\000\000\
\000\000\024\000\029\000\030\000\031\000\005\000\002\000\032\000\
\000\000\019\000\034\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\005\000\005\000\005\000\005\000\032\000\000\000\000\000\
\000\000\020\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\031\000\000\000\000\000\000\000\000\000\
\000\000\035\000\019\000\020\000\021\000\022\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\031\000\032\000\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\032\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\028\000\014\000\015\000\000\000\
\000\000\000\000\029\000\000\000\000\000\000\000\000\000\032\000\
\000\000\000\000\036\000\000\000\000\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\049\000\050\000\000\000\000\000\032\000"

let yycheck = "\001\000\
\000\000\000\000\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\002\001\019\001\020\001\026\001\
\000\000\018\001\019\001\020\001\026\001\077\001\077\001\018\001\
\012\000\026\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\027\001\052\000\052\001\028\001\
\031\001\018\001\019\001\020\001\045\001\060\000\003\001\004\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\003\001\004\001\005\001\006\001\007\001\008\001\019\001\020\001\
\020\001\053\000\077\001\053\001\045\001\026\001\026\001\077\001\
\019\001\020\001\026\001\077\001\077\001\000\000\053\001\026\001\
\255\255\072\001\073\001\074\001\075\001\076\001\003\001\004\001\
\045\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\255\255\077\001\255\255\019\001\020\001\
\255\255\019\001\020\001\255\255\255\255\026\001\255\255\255\255\
\026\001\255\255\009\001\010\001\011\001\012\001\011\001\012\001\
\077\001\077\001\255\255\018\001\255\255\018\001\255\255\255\255\
\255\255\255\255\077\001\045\001\003\001\004\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\003\001\004\001\
\005\001\006\001\007\001\008\001\019\001\020\001\045\001\255\255\
\045\001\255\255\255\255\026\001\255\255\255\255\019\001\020\001\
\077\001\255\255\255\255\077\001\255\255\026\001\072\001\073\001\
\074\001\075\001\076\001\003\001\004\001\255\255\045\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\019\001\020\001\255\255\255\255\019\001\
\020\001\255\255\026\001\255\255\255\255\255\255\026\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\077\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\077\001\045\001\255\255\255\255\255\255\255\255\255\255\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\003\001\
\004\001\005\001\006\001\007\001\008\001\077\001\255\255\019\001\
\020\001\077\001\255\255\255\255\255\255\255\255\026\001\019\001\
\020\001\255\255\255\255\255\255\255\255\255\255\026\001\003\001\
\004\001\005\001\006\001\007\001\008\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\019\001\
\020\001\077\001\255\255\027\001\018\001\019\001\026\001\031\001\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\077\001\018\001\019\001\020\001\053\001\053\001\045\001\
\255\255\077\001\026\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\072\001\073\001\074\001\075\001\076\001\045\001\255\255\255\255\
\255\255\077\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\026\001\003\001\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\045\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\003\000\004\000\255\255\
\255\255\255\255\018\001\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\016\000\255\255\255\255\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\032\000\255\255\255\255\045\001"

let yynames_const = "\
  NOELSE\000\
  ASN\000\
  EQ\000\
  NEQ\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSEQ\000\
  MINUSEQ\000\
  TIMESEQ\000\
  DIVIDEEQ\000\
  EXPEQ\000\
  EXP\000\
  AND\000\
  OR\000\
  ARROW\000\
  CONTINUE\000\
  BREAK\000\
  TAB\000\
  SPACE\000\
  COLON\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  COMMA\000\
  DEF\000\
  IN\000\
  RETURN\000\
  NONE\000\
  DOT\000\
  UNION\000\
  BOOL\000\
  INT\000\
  FLOAT\000\
  STRING\000\
  TUPLE\000\
  LIST\000\
  MODULUS\000\
  SEP\000\
  CLASS\000\
  IMPORT\000\
  RANGE\000\
  DELETE\000\
  TYPE\000\
  INDENT\000\
  DEDENT\000\
  NEW\000\
  DREF\000\
  PUBLIC\000\
  PRIVATE\000\
  ADDRESS_OF\000\
  LPAREN\000\
  RPAREN\000\
  SAME_INDENT\000\
  LBRACK\000\
  RBRACK\000\
  VIRTUAL\000\
  NULL\000\
  MAKEMANUAL\000\
  RELEASE\000\
  LBRACE\000\
  RBRACE\000\
  RETAIN\000\
  NOT\000\
  EOF\000\
  EOL\000\
  "

let yynames_block = "\
  VARIABLE\000\
  Float_Lit\000\
  String_Lit\000\
  Literal\000\
  BLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
               ( _1 )
# 448 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 54 "parser.mly"
  ([])
# 454 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 55 "parser.mly"
                 (_1::_2)
# 462 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
           ( Expr _1 )
# 469 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 59 "parser.mly"
                                                  (If (_2,_5,Block([])))
# 477 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_block_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 60 "parser.mly"
                                                                   ( If(_2, _5, _9) )
# 486 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_block_list) in
    Obj.repr(
# 61 "parser.mly"
                                        (While (_2, _5))
# 494 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 64 "parser.mly"
                         (Block _2)
# 501 "parser.ml"
               : 'stmt_block_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 68 "parser.mly"
           (Variable _1)
# 508 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 69 "parser.mly"
          (Literal _1)
# 515 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 70 "parser.mly"
            (Float_literal (_1))
# 522 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 71 "parser.mly"
       (Blit _1)
# 529 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
              ( Stirng_literal (_1))
# 536 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                    (Assign (_1,_3))
# 544 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
               ( Binop(_1, Eq, _3) )
# 552 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                ( Binop(_1, Neq, _3) )
# 560 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
              ( Binop(_1,Lt, _3) )
# 568 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 77 "parser.mly"
               ( Binop(_1, Gt, _3) )
# 576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                ( Binop(_1,Lteq, _3) )
# 584 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                ( Binop(_1,Rteq, _3) )
# 592 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                ( Binop(_1, And, _3) )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
               ( Binop(_1, Or, _3) )
# 608 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                 ( Binop(_1, Plus, _3) )
# 616 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                  ( Binop(_1, Minus, _3) )
# 624 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                  ( Binop(_1, Times, _3) )
# 632 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                   ( Binop(_1, Divide, _3) )
# 640 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                ( Binop(_1, Exp, _3) )
# 648 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                     ( Binop(_1, Mod, _3) )
# 656 "parser.ml"
               : 'expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
